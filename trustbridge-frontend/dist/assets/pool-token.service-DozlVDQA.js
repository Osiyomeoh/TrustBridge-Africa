var f=Object.defineProperty;var x=(r,e,o)=>e in r?f(r,e,{enumerable:!0,configurable:!0,writable:!0,value:o}):r[e]=o;var T=(r,e,o)=>x(r,typeof e!="symbol"?e+"":e,o);import{_ as u,e as d,a as k,b as p,r as C,c as N}from"./index-CnXZ6NR0.js";class E{constructor(e,o){T(this,"hederaClient");T(this,"signer");this.hederaClient=e,this.signer=o}async createPoolTokens(e){var o,t,n;try{console.log("🏊 Creating pool tokens following Centrifuge model..."),console.log("📊 Pool Data:",{poolName:e.poolName,assetNFTs:e.assetNFTs,totalValue:e.totalPoolValue,tranches:e.tranches});const s=Math.floor(e.tokenSupply*(e.tranches.senior.percentage/100)),i=e.tokenSupply-s;console.log("💰 Token Economics:",{totalSupply:e.tokenSupply,seniorSupply:s,juniorSupply:i,seniorPercentage:e.tranches.senior.percentage,juniorPercentage:e.tranches.junior.percentage}),console.log("🪙 Creating Senior Tranche Token...");const h=new u().setTokenName(`${e.poolName} Senior Pool Token`).setTokenSymbol(`${e.poolName.slice(0,3).toUpperCase()}S`).setTokenType(d.FungibleCommon).setDecimals(6).setInitialSupply(0).setTreasuryAccountId(e.amcAccount).setSupplyType(k.Finite).setMaxSupply(s).setTokenMemo(`POOL:${e.poolId}|TRANCHE:SENIOR|APY:${e.tranches.senior.apy}%|RISK:LOW`).setMaxTransactionFee(new p(10)).setTransactionValidDuration(120);h.freezeWithSigner(this.signer);const S=await(await this.signer.signTransaction(h)).execute(this.hederaClient);if(!S.transactionId)throw new Error("Senior token creation failed");const c=(o=(await S.getReceipt(this.hederaClient)).tokenId)==null?void 0:o.toString();if(!c)throw new Error("Senior token creation failed - no token ID");console.log(`✅ Senior Tranche Token created: ${c}`),console.log("🪙 Creating Junior Tranche Token...");const m=new u().setTokenName(`${e.poolName} Junior Pool Token`).setTokenSymbol(`${e.poolName.slice(0,3).toUpperCase()}J`).setTokenType(d.FungibleCommon).setDecimals(6).setInitialSupply(0).setTreasuryAccountId(e.amcAccount).setSupplyType(k.Finite).setMaxSupply(i).setTokenMemo(`POOL:${e.poolId}|TRANCHE:JUNIOR|APY:${e.tranches.junior.apy}%|RISK:HIGH`).setMaxTransactionFee(new p(10)).setTransactionValidDuration(120);m.freezeWithSigner(this.signer);const I=await(await this.signer.signTransaction(m)).execute(this.hederaClient);if(!I.transactionId)throw new Error("Junior token creation failed");const a=(t=(await I.getReceipt(this.hederaClient)).tokenId)==null?void 0:t.toString();if(!a)throw new Error("Junior token creation failed - no token ID");console.log(`✅ Junior Tranche Token created: ${a}`),console.log("🪙 Creating General Pool Token...");const w=new u().setTokenName(`${e.poolName} Pool Token`).setTokenSymbol(`${e.poolName.slice(0,3).toUpperCase()}P`).setTokenType(d.FungibleCommon).setDecimals(6).setInitialSupply(0).setTreasuryAccountId(e.amcAccount).setSupplyType(k.Finite).setMaxSupply(e.tokenSupply).setTokenMemo(`POOL:${e.poolId}|TOTAL:${e.totalPoolValue}|APY:${e.expectedAPY}%`).setMaxTransactionFee(new p(10)).setTransactionValidDuration(120);w.freezeWithSigner(this.signer);const g=await(await this.signer.signTransaction(w)).execute(this.hederaClient);if(!g.transactionId)throw new Error("Pool token creation failed");const l=(n=(await g.getReceipt(this.hederaClient)).tokenId)==null?void 0:n.toString();if(!l)throw new Error("Pool token creation failed - no token ID");console.log(`✅ General Pool Token created: ${l}`);const y={poolId:e.poolId,poolName:e.poolName,poolDescription:e.poolDescription,assetNFTs:e.assetNFTs,totalPoolValue:e.totalPoolValue,expectedAPY:e.expectedAPY,amcAccount:e.amcAccount,tokens:{pool:l,senior:c,junior:a},supplies:{total:e.tokenSupply,senior:s,junior:i},tranches:e.tranches,createdAt:new Date().toISOString(),status:"ACTIVE"},P=JSON.parse(localStorage.getItem("rwaPools")||"[]");return P.push(y),localStorage.setItem("rwaPools",JSON.stringify(P)),console.log("✅ Pool configuration stored:",y),{poolTokenId:l,seniorTokenId:c,juniorTokenId:a,transactionId:g.transactionId.toString(),poolId:e.poolId,totalSupply:e.tokenSupply}}catch(s){throw console.error("❌ Pool token creation failed:",s),s}}async mintPoolTokens(e,o,t){try{console.log(`🎯 Minting ${o} pool tokens to ${t}`);const n=new C().setTokenId(N.fromString(e)).setAmount(o).setMaxTransactionFee(new p(5)).setTransactionValidDuration(120);n.freezeWithSigner(this.signer);const i=await(await this.signer.signTransaction(n)).execute(this.hederaClient);if(!i.transactionId)throw new Error("Pool token minting failed");return console.log(`✅ Minted ${o} pool tokens`),i.transactionId.toString()}catch(n){throw console.error("❌ Pool token minting failed:",n),n}}async getPoolTokenBalance(e,o){try{const n=await(await fetch(`https://testnet.mirrornode.hedera.com/api/v1/accounts/${e}/tokens?token.id=${o}`)).json();return n.tokens&&n.tokens.length>0?parseInt(n.tokens[0].balance)/1e6:0}catch(t){return console.error("❌ Failed to get pool token balance:",t),0}}async getPoolInfo(e){return JSON.parse(localStorage.getItem("rwaPools")||"[]").find(t=>t.poolId===e)}async getAllPools(){return JSON.parse(localStorage.getItem("rwaPools")||"[]")}}export{E as PoolTokenService};
