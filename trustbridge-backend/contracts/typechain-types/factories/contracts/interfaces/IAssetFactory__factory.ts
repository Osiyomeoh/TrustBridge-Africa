/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IAssetFactory,
  IAssetFactoryInterface,
} from "../../../contracts/interfaces/IAssetFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "assetId",
        type: "bytes32",
      },
    ],
    name: "getAsset",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "id",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "string",
            name: "assetType",
            type: "string",
          },
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "location",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "totalValue",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "tokenSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "tokenizedAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maturityDate",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "verificationScore",
            type: "uint8",
          },
          {
            internalType: "bool",
            name: "isActive",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "createdAt",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "tokenContract",
            type: "address",
          },
        ],
        internalType: "struct IAssetFactory.Asset",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getUserAssets",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "",
        type: "bytes32[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_verificationRegistry",
        type: "address",
      },
    ],
    name: "setVerificationRegistry",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "assetType",
        type: "string",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "location",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "totalValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenSupply",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maturityDate",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "verificationAssetId",
        type: "bytes32",
      },
    ],
    name: "tokenizeAsset",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
] as const;

export class IAssetFactory__factory {
  static readonly abi = _abi;
  static createInterface(): IAssetFactoryInterface {
    return new Interface(_abi) as IAssetFactoryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IAssetFactory {
    return new Contract(address, _abi, runner) as unknown as IAssetFactory;
  }
}
