/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace BatchMinting {
  export type CollectionStruct = {
    name: string;
    description: string;
    totalSupply: BigNumberish;
    minted: BigNumberish;
    mintPrice: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    isActive: boolean;
    creator: AddressLike;
  };

  export type CollectionStructOutput = [
    name: string,
    description: string,
    totalSupply: bigint,
    minted: bigint,
    mintPrice: bigint,
    startTime: bigint,
    endTime: bigint,
    isActive: boolean,
    creator: string
  ] & {
    name: string;
    description: string;
    totalSupply: bigint;
    minted: bigint;
    mintPrice: bigint;
    startTime: bigint;
    endTime: bigint;
    isActive: boolean;
    creator: string;
  };
}

export interface BatchMintingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "AUCTION_MINT_FEE"
      | "BATCH_MINT_FEE"
      | "COLLECTION_MINT_FEE"
      | "DEFAULT_ADMIN_ROLE"
      | "DROP_MINT_FEE"
      | "MANAGER_ROLE"
      | "MAX_BATCH_SIZE"
      | "MINTER_ROLE"
      | "MIN_BATCH_SIZE"
      | "MIN_COLLECTION_SIZE"
      | "SINGLE_MINT_FEE"
      | "assetNFT"
      | "collections"
      | "createCollection"
      | "getCollection"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "mintBatch"
      | "mintFromCollection"
      | "nextCollectionId"
      | "pause"
      | "paused"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "trustToken"
      | "unpause"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BatchMinted"
      | "CollectionCreated"
      | "CollectionMinted"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "AUCTION_MINT_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BATCH_MINT_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COLLECTION_MINT_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DROP_MINT_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_BATCH_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_BATCH_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_COLLECTION_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SINGLE_MINT_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "assetNFT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collections",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCollection",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollection",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBatch",
    values: [
      AddressLike,
      BigNumberish[],
      string[],
      string[],
      string[],
      BigNumberish[],
      string[],
      string[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintFromCollection",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextCollectionId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "trustToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "AUCTION_MINT_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BATCH_MINT_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COLLECTION_MINT_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DROP_MINT_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_BATCH_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_BATCH_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_COLLECTION_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SINGLE_MINT_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assetNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintBatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintFromCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextCollectionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trustToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace BatchMintedEvent {
  export type InputTuple = [
    to: AddressLike,
    tokenIds: BigNumberish[],
    totalFee: BigNumberish,
    batchType: BigNumberish
  ];
  export type OutputTuple = [
    to: string,
    tokenIds: bigint[],
    totalFee: bigint,
    batchType: bigint
  ];
  export interface OutputObject {
    to: string;
    tokenIds: bigint[];
    totalFee: bigint;
    batchType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollectionCreatedEvent {
  export type InputTuple = [
    collectionId: BigNumberish,
    name: string,
    totalSupply: BigNumberish,
    mintPrice: BigNumberish
  ];
  export type OutputTuple = [
    collectionId: bigint,
    name: string,
    totalSupply: bigint,
    mintPrice: bigint
  ];
  export interface OutputObject {
    collectionId: bigint;
    name: string;
    totalSupply: bigint;
    mintPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollectionMintedEvent {
  export type InputTuple = [
    collectionId: BigNumberish,
    to: AddressLike,
    tokenIds: BigNumberish[],
    quantity: BigNumberish
  ];
  export type OutputTuple = [
    collectionId: bigint,
    to: string,
    tokenIds: bigint[],
    quantity: bigint
  ];
  export interface OutputObject {
    collectionId: bigint;
    to: string;
    tokenIds: bigint[];
    quantity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BatchMinting extends BaseContract {
  connect(runner?: ContractRunner | null): BatchMinting;
  waitForDeployment(): Promise<this>;

  interface: BatchMintingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  AUCTION_MINT_FEE: TypedContractMethod<[], [bigint], "view">;

  BATCH_MINT_FEE: TypedContractMethod<[], [bigint], "view">;

  COLLECTION_MINT_FEE: TypedContractMethod<[], [bigint], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DROP_MINT_FEE: TypedContractMethod<[], [bigint], "view">;

  MANAGER_ROLE: TypedContractMethod<[], [string], "view">;

  MAX_BATCH_SIZE: TypedContractMethod<[], [bigint], "view">;

  MINTER_ROLE: TypedContractMethod<[], [string], "view">;

  MIN_BATCH_SIZE: TypedContractMethod<[], [bigint], "view">;

  MIN_COLLECTION_SIZE: TypedContractMethod<[], [bigint], "view">;

  SINGLE_MINT_FEE: TypedContractMethod<[], [bigint], "view">;

  assetNFT: TypedContractMethod<[], [string], "view">;

  collections: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        string
      ] & {
        name: string;
        description: string;
        totalSupply: bigint;
        minted: bigint;
        mintPrice: bigint;
        startTime: bigint;
        endTime: bigint;
        isActive: boolean;
        creator: string;
      }
    ],
    "view"
  >;

  createCollection: TypedContractMethod<
    [
      name: string,
      description: string,
      totalSupply: BigNumberish,
      mintPrice: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getCollection: TypedContractMethod<
    [collectionId: BigNumberish],
    [BatchMinting.CollectionStructOutput],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  mintBatch: TypedContractMethod<
    [
      to: AddressLike,
      categories: BigNumberish[],
      assetTypes: string[],
      names: string[],
      locations: string[],
      totalValues: BigNumberish[],
      imageURIs: string[],
      descriptions: string[]
    ],
    [void],
    "nonpayable"
  >;

  mintFromCollection: TypedContractMethod<
    [collectionId: BigNumberish, quantity: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  nextCollectionId: TypedContractMethod<[], [bigint], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  trustToken: TypedContractMethod<[], [string], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "AUCTION_MINT_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BATCH_MINT_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "COLLECTION_MINT_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DROP_MINT_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MANAGER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_BATCH_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MINTER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MIN_BATCH_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_COLLECTION_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SINGLE_MINT_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "assetNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "collections"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        string
      ] & {
        name: string;
        description: string;
        totalSupply: bigint;
        minted: bigint;
        mintPrice: bigint;
        startTime: bigint;
        endTime: bigint;
        isActive: boolean;
        creator: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createCollection"
  ): TypedContractMethod<
    [
      name: string,
      description: string,
      totalSupply: BigNumberish,
      mintPrice: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCollection"
  ): TypedContractMethod<
    [collectionId: BigNumberish],
    [BatchMinting.CollectionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "mintBatch"
  ): TypedContractMethod<
    [
      to: AddressLike,
      categories: BigNumberish[],
      assetTypes: string[],
      names: string[],
      locations: string[],
      totalValues: BigNumberish[],
      imageURIs: string[],
      descriptions: string[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintFromCollection"
  ): TypedContractMethod<
    [collectionId: BigNumberish, quantity: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nextCollectionId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "trustToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "BatchMinted"
  ): TypedContractEvent<
    BatchMintedEvent.InputTuple,
    BatchMintedEvent.OutputTuple,
    BatchMintedEvent.OutputObject
  >;
  getEvent(
    key: "CollectionCreated"
  ): TypedContractEvent<
    CollectionCreatedEvent.InputTuple,
    CollectionCreatedEvent.OutputTuple,
    CollectionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "CollectionMinted"
  ): TypedContractEvent<
    CollectionMintedEvent.InputTuple,
    CollectionMintedEvent.OutputTuple,
    CollectionMintedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "BatchMinted(address,uint256[],uint256,uint256)": TypedContractEvent<
      BatchMintedEvent.InputTuple,
      BatchMintedEvent.OutputTuple,
      BatchMintedEvent.OutputObject
    >;
    BatchMinted: TypedContractEvent<
      BatchMintedEvent.InputTuple,
      BatchMintedEvent.OutputTuple,
      BatchMintedEvent.OutputObject
    >;

    "CollectionCreated(uint256,string,uint256,uint256)": TypedContractEvent<
      CollectionCreatedEvent.InputTuple,
      CollectionCreatedEvent.OutputTuple,
      CollectionCreatedEvent.OutputObject
    >;
    CollectionCreated: TypedContractEvent<
      CollectionCreatedEvent.InputTuple,
      CollectionCreatedEvent.OutputTuple,
      CollectionCreatedEvent.OutputObject
    >;

    "CollectionMinted(uint256,address,uint256[],uint256)": TypedContractEvent<
      CollectionMintedEvent.InputTuple,
      CollectionMintedEvent.OutputTuple,
      CollectionMintedEvent.OutputObject
    >;
    CollectionMinted: TypedContractEvent<
      CollectionMintedEvent.InputTuple,
      CollectionMintedEvent.OutputTuple,
      CollectionMintedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
