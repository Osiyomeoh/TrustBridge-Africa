/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TRUSTAssetFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "MIN_CREATION_FEE"
      | "VERIFIER_ROLE"
      | "assetNFT"
      | "assets"
      | "categoryAssetCount"
      | "countryAssetCount"
      | "emergencyWithdraw"
      | "feeRecipient"
      | "getAsset"
      | "getAssetEvidence"
      | "getCategoryAssets"
      | "getCountryAssets"
      | "getRoleAdmin"
      | "getTotalValueLockedInHBAR"
      | "getTotalValueLockedInTRUST"
      | "getUserAssets"
      | "grantRole"
      | "hasRole"
      | "pause"
      | "paused"
      | "renounceRole"
      | "revokeRole"
      | "setAssetVerificationLevel"
      | "setMinCreationFee"
      | "setVerificationFee"
      | "supportsInterface"
      | "tokenizeAsset"
      | "totalAssetsTokenized"
      | "totalValueLocked"
      | "trustToken"
      | "unpause"
      | "updateAssetStatus"
      | "userAssets"
      | "verificationFees"
      | "verificationRegistry"
      | "verifyAsset"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AssetStatusUpdated"
      | "AssetTokenized"
      | "AssetVerificationLevelUpdated"
      | "AssetVerified"
      | "CreationFeeUpdated"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_CREATION_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VERIFIER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "assetNFT", values?: undefined): string;
  encodeFunctionData(functionFragment: "assets", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "categoryAssetCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "countryAssetCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getAsset", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getAssetEvidence",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCategoryAssets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCountryAssets",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalValueLockedInHBAR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalValueLockedInTRUST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAssets",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetVerificationLevel",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinCreationFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerificationFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenizeAsset",
    values: [
      BigNumberish,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string[],
      string[],
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAssetsTokenized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalValueLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "trustToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateAssetStatus",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "userAssets",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verificationFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verificationRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyAsset",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_CREATION_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VERIFIER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assetNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "categoryAssetCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countryAssetCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAssetEvidence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCategoryAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCountryAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalValueLockedInHBAR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalValueLockedInTRUST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAssetVerificationLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinCreationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerificationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenizeAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAssetsTokenized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalValueLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trustToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAssetStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userAssets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verificationFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verificationRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyAsset",
    data: BytesLike
  ): Result;
}

export namespace AssetStatusUpdatedEvent {
  export type InputTuple = [assetId: BytesLike, isActive: boolean];
  export type OutputTuple = [assetId: string, isActive: boolean];
  export interface OutputObject {
    assetId: string;
    isActive: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetTokenizedEvent {
  export type InputTuple = [
    assetId: BytesLike,
    owner: AddressLike,
    category: BigNumberish,
    assetType: string,
    name: string,
    totalValue: BigNumberish,
    level: BigNumberish,
    nftContract: AddressLike,
    tokenId: BigNumberish,
    creationFee: BigNumberish
  ];
  export type OutputTuple = [
    assetId: string,
    owner: string,
    category: bigint,
    assetType: string,
    name: string,
    totalValue: bigint,
    level: bigint,
    nftContract: string,
    tokenId: bigint,
    creationFee: bigint
  ];
  export interface OutputObject {
    assetId: string;
    owner: string;
    category: bigint;
    assetType: string;
    name: string;
    totalValue: bigint;
    level: bigint;
    nftContract: string;
    tokenId: bigint;
    creationFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetVerificationLevelUpdatedEvent {
  export type InputTuple = [
    assetId: BytesLike,
    verificationLevel: BigNumberish
  ];
  export type OutputTuple = [assetId: string, verificationLevel: bigint];
  export interface OutputObject {
    assetId: string;
    verificationLevel: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetVerifiedEvent {
  export type InputTuple = [
    assetId: BytesLike,
    verificationScore: BigNumberish
  ];
  export type OutputTuple = [assetId: string, verificationScore: bigint];
  export interface OutputObject {
    assetId: string;
    verificationScore: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreationFeeUpdatedEvent {
  export type InputTuple = [newFee: BigNumberish];
  export type OutputTuple = [newFee: bigint];
  export interface OutputObject {
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TRUSTAssetFactory extends BaseContract {
  connect(runner?: ContractRunner | null): TRUSTAssetFactory;
  waitForDeployment(): Promise<this>;

  interface: TRUSTAssetFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MIN_CREATION_FEE: TypedContractMethod<[], [bigint], "view">;

  VERIFIER_ROLE: TypedContractMethod<[], [string], "view">;

  assetNFT: TypedContractMethod<[], [string], "view">;

  assets: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        string,
        bigint,
        bigint
      ] & {
        id: string;
        owner: string;
        category: bigint;
        assetType: string;
        name: string;
        location: string;
        totalValue: bigint;
        maturityDate: bigint;
        verificationScore: bigint;
        isActive: boolean;
        createdAt: bigint;
        nftContract: string;
        tokenId: bigint;
        verificationLevel: bigint;
      }
    ],
    "view"
  >;

  categoryAssetCount: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  countryAssetCount: TypedContractMethod<[arg0: string], [bigint], "view">;

  emergencyWithdraw: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  feeRecipient: TypedContractMethod<[], [string], "view">;

  getAsset: TypedContractMethod<
    [assetId: BytesLike],
    [
      [
        string,
        string,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        string,
        bigint,
        bigint
      ] & {
        id: string;
        owner: string;
        category: bigint;
        assetType: string;
        name: string;
        location: string;
        totalValue: bigint;
        maturityDate: bigint;
        verificationScore: bigint;
        isActive: boolean;
        createdAt: bigint;
        nftContract: string;
        tokenId: bigint;
        verificationLevel: bigint;
      }
    ],
    "view"
  >;

  getAssetEvidence: TypedContractMethod<
    [assetId: BytesLike],
    [
      [string[], string[]] & {
        evidenceHashes: string[];
        documentTypes: string[];
      }
    ],
    "view"
  >;

  getCategoryAssets: TypedContractMethod<
    [category: BigNumberish],
    [bigint],
    "view"
  >;

  getCountryAssets: TypedContractMethod<[country: string], [bigint], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTotalValueLockedInHBAR: TypedContractMethod<[], [bigint], "view">;

  getTotalValueLockedInTRUST: TypedContractMethod<[], [bigint], "view">;

  getUserAssets: TypedContractMethod<[user: AddressLike], [string[]], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setAssetVerificationLevel: TypedContractMethod<
    [assetId: BytesLike, verificationLevel: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinCreationFee: TypedContractMethod<
    [newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setVerificationFee: TypedContractMethod<
    [level: BigNumberish, fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tokenizeAsset: TypedContractMethod<
    [
      category: BigNumberish,
      assetType: string,
      name: string,
      location: string,
      totalValue: BigNumberish,
      maturityDate: BigNumberish,
      level: BigNumberish,
      evidenceHashes: string[],
      documentTypes: string[],
      imageURI: string,
      documentURI: string,
      description: string
    ],
    [string],
    "nonpayable"
  >;

  totalAssetsTokenized: TypedContractMethod<[], [bigint], "view">;

  totalValueLocked: TypedContractMethod<[], [bigint], "view">;

  trustToken: TypedContractMethod<[], [string], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateAssetStatus: TypedContractMethod<
    [assetId: BytesLike, isActive: boolean],
    [void],
    "nonpayable"
  >;

  userAssets: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  verificationFees: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  verificationRegistry: TypedContractMethod<[], [string], "view">;

  verifyAsset: TypedContractMethod<
    [assetId: BytesLike, verificationScore: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MIN_CREATION_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VERIFIER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "assetNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "assets"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        string,
        bigint,
        bigint
      ] & {
        id: string;
        owner: string;
        category: bigint;
        assetType: string;
        name: string;
        location: string;
        totalValue: bigint;
        maturityDate: bigint;
        verificationScore: bigint;
        isActive: boolean;
        createdAt: bigint;
        nftContract: string;
        tokenId: bigint;
        verificationLevel: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "categoryAssetCount"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "countryAssetCount"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "feeRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAsset"
  ): TypedContractMethod<
    [assetId: BytesLike],
    [
      [
        string,
        string,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        string,
        bigint,
        bigint
      ] & {
        id: string;
        owner: string;
        category: bigint;
        assetType: string;
        name: string;
        location: string;
        totalValue: bigint;
        maturityDate: bigint;
        verificationScore: bigint;
        isActive: boolean;
        createdAt: bigint;
        nftContract: string;
        tokenId: bigint;
        verificationLevel: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAssetEvidence"
  ): TypedContractMethod<
    [assetId: BytesLike],
    [
      [string[], string[]] & {
        evidenceHashes: string[];
        documentTypes: string[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCategoryAssets"
  ): TypedContractMethod<[category: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCountryAssets"
  ): TypedContractMethod<[country: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTotalValueLockedInHBAR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalValueLockedInTRUST"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserAssets"
  ): TypedContractMethod<[user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAssetVerificationLevel"
  ): TypedContractMethod<
    [assetId: BytesLike, verificationLevel: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinCreationFee"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVerificationFee"
  ): TypedContractMethod<
    [level: BigNumberish, fee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tokenizeAsset"
  ): TypedContractMethod<
    [
      category: BigNumberish,
      assetType: string,
      name: string,
      location: string,
      totalValue: BigNumberish,
      maturityDate: BigNumberish,
      level: BigNumberish,
      evidenceHashes: string[],
      documentTypes: string[],
      imageURI: string,
      documentURI: string,
      description: string
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalAssetsTokenized"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalValueLocked"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "trustToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateAssetStatus"
  ): TypedContractMethod<
    [assetId: BytesLike, isActive: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userAssets"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "verificationFees"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "verificationRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "verifyAsset"
  ): TypedContractMethod<
    [assetId: BytesLike, verificationScore: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AssetStatusUpdated"
  ): TypedContractEvent<
    AssetStatusUpdatedEvent.InputTuple,
    AssetStatusUpdatedEvent.OutputTuple,
    AssetStatusUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "AssetTokenized"
  ): TypedContractEvent<
    AssetTokenizedEvent.InputTuple,
    AssetTokenizedEvent.OutputTuple,
    AssetTokenizedEvent.OutputObject
  >;
  getEvent(
    key: "AssetVerificationLevelUpdated"
  ): TypedContractEvent<
    AssetVerificationLevelUpdatedEvent.InputTuple,
    AssetVerificationLevelUpdatedEvent.OutputTuple,
    AssetVerificationLevelUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "AssetVerified"
  ): TypedContractEvent<
    AssetVerifiedEvent.InputTuple,
    AssetVerifiedEvent.OutputTuple,
    AssetVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "CreationFeeUpdated"
  ): TypedContractEvent<
    CreationFeeUpdatedEvent.InputTuple,
    CreationFeeUpdatedEvent.OutputTuple,
    CreationFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "AssetStatusUpdated(bytes32,bool)": TypedContractEvent<
      AssetStatusUpdatedEvent.InputTuple,
      AssetStatusUpdatedEvent.OutputTuple,
      AssetStatusUpdatedEvent.OutputObject
    >;
    AssetStatusUpdated: TypedContractEvent<
      AssetStatusUpdatedEvent.InputTuple,
      AssetStatusUpdatedEvent.OutputTuple,
      AssetStatusUpdatedEvent.OutputObject
    >;

    "AssetTokenized(bytes32,address,uint8,string,string,uint256,uint8,address,uint256,uint256)": TypedContractEvent<
      AssetTokenizedEvent.InputTuple,
      AssetTokenizedEvent.OutputTuple,
      AssetTokenizedEvent.OutputObject
    >;
    AssetTokenized: TypedContractEvent<
      AssetTokenizedEvent.InputTuple,
      AssetTokenizedEvent.OutputTuple,
      AssetTokenizedEvent.OutputObject
    >;

    "AssetVerificationLevelUpdated(bytes32,uint8)": TypedContractEvent<
      AssetVerificationLevelUpdatedEvent.InputTuple,
      AssetVerificationLevelUpdatedEvent.OutputTuple,
      AssetVerificationLevelUpdatedEvent.OutputObject
    >;
    AssetVerificationLevelUpdated: TypedContractEvent<
      AssetVerificationLevelUpdatedEvent.InputTuple,
      AssetVerificationLevelUpdatedEvent.OutputTuple,
      AssetVerificationLevelUpdatedEvent.OutputObject
    >;

    "AssetVerified(bytes32,uint8)": TypedContractEvent<
      AssetVerifiedEvent.InputTuple,
      AssetVerifiedEvent.OutputTuple,
      AssetVerifiedEvent.OutputObject
    >;
    AssetVerified: TypedContractEvent<
      AssetVerifiedEvent.InputTuple,
      AssetVerifiedEvent.OutputTuple,
      AssetVerifiedEvent.OutputObject
    >;

    "CreationFeeUpdated(uint256)": TypedContractEvent<
      CreationFeeUpdatedEvent.InputTuple,
      CreationFeeUpdatedEvent.OutputTuple,
      CreationFeeUpdatedEvent.OutputObject
    >;
    CreationFeeUpdated: TypedContractEvent<
      CreationFeeUpdatedEvent.InputTuple,
      CreationFeeUpdatedEvent.OutputTuple,
      CreationFeeUpdatedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
