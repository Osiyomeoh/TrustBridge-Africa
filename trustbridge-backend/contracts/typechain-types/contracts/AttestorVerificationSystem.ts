/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace AttestorVerificationSystem {
  export type TierRequirementsStruct = {
    stakingRequirement: BigNumberish;
    registrationFee: BigNumberish;
    experienceRequirement: BigNumberish;
    requiredDocuments: string[];
  };

  export type TierRequirementsStructOutput = [
    stakingRequirement: bigint,
    registrationFee: bigint,
    experienceRequirement: bigint,
    requiredDocuments: string[]
  ] & {
    stakingRequirement: bigint;
    registrationFee: bigint;
    experienceRequirement: bigint;
    requiredDocuments: string[];
  };

  export type VerificationRequestStruct = {
    requestId: BytesLike;
    assetOwner: AddressLike;
    assetId: BytesLike;
    requiredType: BigNumberish;
    evidenceHashes: string[];
    documentTypes: string[];
    requestedAt: BigNumberish;
    deadline: BigNumberish;
    status: BigNumberish;
    comments: string;
    fee: BigNumberish;
    assignedAttestor: AddressLike;
  };

  export type VerificationRequestStructOutput = [
    requestId: string,
    assetOwner: string,
    assetId: string,
    requiredType: bigint,
    evidenceHashes: string[],
    documentTypes: string[],
    requestedAt: bigint,
    deadline: bigint,
    status: bigint,
    comments: string,
    fee: bigint,
    assignedAttestor: string
  ] & {
    requestId: string;
    assetOwner: string;
    assetId: string;
    requiredType: bigint;
    evidenceHashes: string[];
    documentTypes: string[];
    requestedAt: bigint;
    deadline: bigint;
    status: bigint;
    comments: string;
    fee: bigint;
    assignedAttestor: string;
  };

  export type AttestorProfileStruct = {
    attestorAddress: AddressLike;
    name: string;
    organization: string;
    attestorType: BigNumberish;
    tier: BigNumberish;
    specializations: string[];
    countries: string[];
    experienceYears: BigNumberish;
    totalVerifications: BigNumberish;
    successfulVerifications: BigNumberish;
    failedVerifications: BigNumberish;
    reputationScore: BigNumberish;
    stakedAmount: BigNumberish;
    registrationFee: BigNumberish;
    requiredDocuments: string[];
    uploadedDocuments: string[];
    status: BigNumberish;
    isActive: boolean;
    createdAt: BigNumberish;
    lastActivity: BigNumberish;
    contactInfo: string;
    credentials: string;
    reviewerNotes: string;
  };

  export type AttestorProfileStructOutput = [
    attestorAddress: string,
    name: string,
    organization: string,
    attestorType: bigint,
    tier: bigint,
    specializations: string[],
    countries: string[],
    experienceYears: bigint,
    totalVerifications: bigint,
    successfulVerifications: bigint,
    failedVerifications: bigint,
    reputationScore: bigint,
    stakedAmount: bigint,
    registrationFee: bigint,
    requiredDocuments: string[],
    uploadedDocuments: string[],
    status: bigint,
    isActive: boolean,
    createdAt: bigint,
    lastActivity: bigint,
    contactInfo: string,
    credentials: string,
    reviewerNotes: string
  ] & {
    attestorAddress: string;
    name: string;
    organization: string;
    attestorType: bigint;
    tier: bigint;
    specializations: string[];
    countries: string[];
    experienceYears: bigint;
    totalVerifications: bigint;
    successfulVerifications: bigint;
    failedVerifications: bigint;
    reputationScore: bigint;
    stakedAmount: bigint;
    registrationFee: bigint;
    requiredDocuments: string[];
    uploadedDocuments: string[];
    status: bigint;
    isActive: boolean;
    createdAt: bigint;
    lastActivity: bigint;
    contactInfo: string;
    credentials: string;
    reviewerNotes: string;
  };
}

export interface AttestorVerificationSystemInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ATTESTOR_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "VERIFIER_ROLE"
      | "activeVerificationRequests"
      | "allVerificationRequestIds"
      | "approveVerification"
      | "attestorProfiles"
      | "attestors"
      | "feeRecipient"
      | "getAllAttestors"
      | "getAllVerificationRequests"
      | "getAttestorProfile"
      | "getAttestorStake"
      | "getAttestorStatus"
      | "getAttestorTier"
      | "getAttestorsByCountry"
      | "getAttestorsByTier"
      | "getAttestorsByType"
      | "getRoleAdmin"
      | "getTierRequirements"
      | "getTotalAttestors"
      | "getTotalVerificationRequests"
      | "getUserRequests"
      | "getVerificationRequest"
      | "grantRole"
      | "hasRole"
      | "isAttestor"
      | "pause"
      | "paused"
      | "registerAttestor"
      | "rejectVerification"
      | "renounceRole"
      | "requestVerification"
      | "revokeRole"
      | "supportsInterface"
      | "tierRequirements"
      | "totalAttestors"
      | "totalVerificationRequests"
      | "trustToken"
      | "unpause"
      | "updateAttestorStatus"
      | "updateTierRequirements"
      | "upgradeAttestor"
      | "userRequests"
      | "verificationRequests"
      | "withdrawFees"
      | "withdrawStake"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AttestorRegistered"
      | "AttestorStatusUpdated"
      | "AttestorUpgraded"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "StakeWithdrawn"
      | "TierRequirementsUpdated"
      | "Unpaused"
      | "VerificationCompleted"
      | "VerificationRequested"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ATTESTOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VERIFIER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeVerificationRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allVerificationRequestIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveVerification",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "attestorProfiles",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "attestors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllAttestors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllVerificationRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAttestorProfile",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAttestorStake",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAttestorStatus",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAttestorTier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAttestorsByCountry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAttestorsByTier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAttestorsByType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTierRequirements",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalAttestors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalVerificationRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRequests",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVerificationRequest",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAttestor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerAttestor",
    values: [
      BigNumberish,
      BigNumberish,
      string[],
      string[],
      BigNumberish,
      string,
      string,
      string[],
      string[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectVerification",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestVerification",
    values: [BytesLike, BigNumberish, string[], string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tierRequirements",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAttestors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVerificationRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "trustToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateAttestorStatus",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTierRequirements",
    values: [BigNumberish, AttestorVerificationSystem.TierRequirementsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeAttestor",
    values: [BigNumberish, string[], string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "userRequests",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verificationRequests",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStake",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ATTESTOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VERIFIER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeVerificationRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allVerificationRequestIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "attestorProfiles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "attestors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllAttestors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllVerificationRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttestorProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttestorStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttestorStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttestorTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttestorsByCountry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttestorsByTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttestorsByType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTierRequirements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalAttestors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalVerificationRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerificationRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAttestor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerAttestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tierRequirements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAttestors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVerificationRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trustToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAttestorStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTierRequirements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeAttestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verificationRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStake",
    data: BytesLike
  ): Result;
}

export namespace AttestorRegisteredEvent {
  export type InputTuple = [
    attestor: AddressLike,
    tier: BigNumberish,
    stakedAmount: BigNumberish
  ];
  export type OutputTuple = [
    attestor: string,
    tier: bigint,
    stakedAmount: bigint
  ];
  export interface OutputObject {
    attestor: string;
    tier: bigint;
    stakedAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AttestorStatusUpdatedEvent {
  export type InputTuple = [attestor: AddressLike, status: BigNumberish];
  export type OutputTuple = [attestor: string, status: bigint];
  export interface OutputObject {
    attestor: string;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AttestorUpgradedEvent {
  export type InputTuple = [
    attestor: AddressLike,
    fromTier: BigNumberish,
    toTier: BigNumberish,
    additionalStake: BigNumberish,
    upgradeFee: BigNumberish
  ];
  export type OutputTuple = [
    attestor: string,
    fromTier: bigint,
    toTier: bigint,
    additionalStake: bigint,
    upgradeFee: bigint
  ];
  export interface OutputObject {
    attestor: string;
    fromTier: bigint;
    toTier: bigint;
    additionalStake: bigint;
    upgradeFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeWithdrawnEvent {
  export type InputTuple = [attestor: AddressLike, amount: BigNumberish];
  export type OutputTuple = [attestor: string, amount: bigint];
  export interface OutputObject {
    attestor: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TierRequirementsUpdatedEvent {
  export type InputTuple = [
    tier: BigNumberish,
    requirements: AttestorVerificationSystem.TierRequirementsStruct
  ];
  export type OutputTuple = [
    tier: bigint,
    requirements: AttestorVerificationSystem.TierRequirementsStructOutput
  ];
  export interface OutputObject {
    tier: bigint;
    requirements: AttestorVerificationSystem.TierRequirementsStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerificationCompletedEvent {
  export type InputTuple = [
    requestId: BytesLike,
    status: BigNumberish,
    attestor: AddressLike
  ];
  export type OutputTuple = [
    requestId: string,
    status: bigint,
    attestor: string
  ];
  export interface OutputObject {
    requestId: string;
    status: bigint;
    attestor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerificationRequestedEvent {
  export type InputTuple = [
    requestId: BytesLike,
    assetOwner: AddressLike,
    assetId: BytesLike,
    requiredType: BigNumberish,
    requestedAt: BigNumberish,
    deadline: BigNumberish,
    fee: BigNumberish
  ];
  export type OutputTuple = [
    requestId: string,
    assetOwner: string,
    assetId: string,
    requiredType: bigint,
    requestedAt: bigint,
    deadline: bigint,
    fee: bigint
  ];
  export interface OutputObject {
    requestId: string;
    assetOwner: string;
    assetId: string;
    requiredType: bigint;
    requestedAt: bigint;
    deadline: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AttestorVerificationSystem extends BaseContract {
  connect(runner?: ContractRunner | null): AttestorVerificationSystem;
  waitForDeployment(): Promise<this>;

  interface: AttestorVerificationSystemInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ATTESTOR_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  VERIFIER_ROLE: TypedContractMethod<[], [string], "view">;

  activeVerificationRequests: TypedContractMethod<[], [bigint], "view">;

  allVerificationRequestIds: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  approveVerification: TypedContractMethod<
    [_requestId: BytesLike, _comments: string],
    [void],
    "nonpayable"
  >;

  attestorProfiles: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        string,
        string,
        string
      ] & {
        attestorAddress: string;
        name: string;
        organization: string;
        attestorType: bigint;
        tier: bigint;
        experienceYears: bigint;
        totalVerifications: bigint;
        successfulVerifications: bigint;
        failedVerifications: bigint;
        reputationScore: bigint;
        stakedAmount: bigint;
        registrationFee: bigint;
        status: bigint;
        isActive: boolean;
        createdAt: bigint;
        lastActivity: bigint;
        contactInfo: string;
        credentials: string;
        reviewerNotes: string;
      }
    ],
    "view"
  >;

  attestors: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  feeRecipient: TypedContractMethod<[], [string], "view">;

  getAllAttestors: TypedContractMethod<[], [string[]], "view">;

  getAllVerificationRequests: TypedContractMethod<
    [],
    [AttestorVerificationSystem.VerificationRequestStructOutput[]],
    "view"
  >;

  getAttestorProfile: TypedContractMethod<
    [attestor: AddressLike],
    [AttestorVerificationSystem.AttestorProfileStructOutput],
    "view"
  >;

  getAttestorStake: TypedContractMethod<
    [attestor: AddressLike],
    [bigint],
    "view"
  >;

  getAttestorStatus: TypedContractMethod<
    [attestor: AddressLike],
    [bigint],
    "view"
  >;

  getAttestorTier: TypedContractMethod<
    [attestor: AddressLike],
    [bigint],
    "view"
  >;

  getAttestorsByCountry: TypedContractMethod<
    [country: string],
    [string[]],
    "view"
  >;

  getAttestorsByTier: TypedContractMethod<
    [tier: BigNumberish],
    [string[]],
    "view"
  >;

  getAttestorsByType: TypedContractMethod<
    [attestorType: BigNumberish],
    [string[]],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTierRequirements: TypedContractMethod<
    [tier: BigNumberish],
    [AttestorVerificationSystem.TierRequirementsStructOutput],
    "view"
  >;

  getTotalAttestors: TypedContractMethod<[], [bigint], "view">;

  getTotalVerificationRequests: TypedContractMethod<[], [bigint], "view">;

  getUserRequests: TypedContractMethod<[user: AddressLike], [string[]], "view">;

  getVerificationRequest: TypedContractMethod<
    [requestId: BytesLike],
    [AttestorVerificationSystem.VerificationRequestStructOutput],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isAttestor: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  registerAttestor: TypedContractMethod<
    [
      _attestorType: BigNumberish,
      _tier: BigNumberish,
      _specializations: string[],
      _countries: string[],
      _experienceYears: BigNumberish,
      _contactInfo: string,
      _credentials: string,
      _documentHashes: string[],
      _documentTypes: string[]
    ],
    [void],
    "nonpayable"
  >;

  rejectVerification: TypedContractMethod<
    [_requestId: BytesLike, _comments: string],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  requestVerification: TypedContractMethod<
    [
      _assetId: BytesLike,
      _requiredType: BigNumberish,
      _evidenceHashes: string[],
      _documentTypes: string[],
      _deadline: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tierRequirements: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        stakingRequirement: bigint;
        registrationFee: bigint;
        experienceRequirement: bigint;
      }
    ],
    "view"
  >;

  totalAttestors: TypedContractMethod<[], [bigint], "view">;

  totalVerificationRequests: TypedContractMethod<[], [bigint], "view">;

  trustToken: TypedContractMethod<[], [string], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateAttestorStatus: TypedContractMethod<
    [_attestor: AddressLike, _status: BigNumberish, _reviewerNotes: string],
    [void],
    "nonpayable"
  >;

  updateTierRequirements: TypedContractMethod<
    [
      tier: BigNumberish,
      requirements: AttestorVerificationSystem.TierRequirementsStruct
    ],
    [void],
    "nonpayable"
  >;

  upgradeAttestor: TypedContractMethod<
    [
      _newTier: BigNumberish,
      _newSpecializations: string[],
      _newCountries: string[],
      _updatedCredentials: string
    ],
    [void],
    "nonpayable"
  >;

  userRequests: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  verificationRequests: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        string
      ] & {
        requestId: string;
        assetOwner: string;
        assetId: string;
        requiredType: bigint;
        requestedAt: bigint;
        deadline: bigint;
        status: bigint;
        comments: string;
        fee: bigint;
        assignedAttestor: string;
      }
    ],
    "view"
  >;

  withdrawFees: TypedContractMethod<[], [void], "nonpayable">;

  withdrawStake: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ATTESTOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VERIFIER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "activeVerificationRequests"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allVerificationRequestIds"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "approveVerification"
  ): TypedContractMethod<
    [_requestId: BytesLike, _comments: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "attestorProfiles"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        string,
        string,
        string
      ] & {
        attestorAddress: string;
        name: string;
        organization: string;
        attestorType: bigint;
        tier: bigint;
        experienceYears: bigint;
        totalVerifications: bigint;
        successfulVerifications: bigint;
        failedVerifications: bigint;
        reputationScore: bigint;
        stakedAmount: bigint;
        registrationFee: bigint;
        status: bigint;
        isActive: boolean;
        createdAt: bigint;
        lastActivity: bigint;
        contactInfo: string;
        credentials: string;
        reviewerNotes: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "attestors"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "feeRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAllAttestors"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAllVerificationRequests"
  ): TypedContractMethod<
    [],
    [AttestorVerificationSystem.VerificationRequestStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAttestorProfile"
  ): TypedContractMethod<
    [attestor: AddressLike],
    [AttestorVerificationSystem.AttestorProfileStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAttestorStake"
  ): TypedContractMethod<[attestor: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAttestorStatus"
  ): TypedContractMethod<[attestor: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAttestorTier"
  ): TypedContractMethod<[attestor: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAttestorsByCountry"
  ): TypedContractMethod<[country: string], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAttestorsByTier"
  ): TypedContractMethod<[tier: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAttestorsByType"
  ): TypedContractMethod<[attestorType: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTierRequirements"
  ): TypedContractMethod<
    [tier: BigNumberish],
    [AttestorVerificationSystem.TierRequirementsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalAttestors"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalVerificationRequests"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserRequests"
  ): TypedContractMethod<[user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getVerificationRequest"
  ): TypedContractMethod<
    [requestId: BytesLike],
    [AttestorVerificationSystem.VerificationRequestStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAttestor"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerAttestor"
  ): TypedContractMethod<
    [
      _attestorType: BigNumberish,
      _tier: BigNumberish,
      _specializations: string[],
      _countries: string[],
      _experienceYears: BigNumberish,
      _contactInfo: string,
      _credentials: string,
      _documentHashes: string[],
      _documentTypes: string[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rejectVerification"
  ): TypedContractMethod<
    [_requestId: BytesLike, _comments: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestVerification"
  ): TypedContractMethod<
    [
      _assetId: BytesLike,
      _requiredType: BigNumberish,
      _evidenceHashes: string[],
      _documentTypes: string[],
      _deadline: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tierRequirements"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        stakingRequirement: bigint;
        registrationFee: bigint;
        experienceRequirement: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalAttestors"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalVerificationRequests"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "trustToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateAttestorStatus"
  ): TypedContractMethod<
    [_attestor: AddressLike, _status: BigNumberish, _reviewerNotes: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateTierRequirements"
  ): TypedContractMethod<
    [
      tier: BigNumberish,
      requirements: AttestorVerificationSystem.TierRequirementsStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeAttestor"
  ): TypedContractMethod<
    [
      _newTier: BigNumberish,
      _newSpecializations: string[],
      _newCountries: string[],
      _updatedCredentials: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userRequests"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "verificationRequests"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        string
      ] & {
        requestId: string;
        assetOwner: string;
        assetId: string;
        requiredType: bigint;
        requestedAt: bigint;
        deadline: bigint;
        status: bigint;
        comments: string;
        fee: bigint;
        assignedAttestor: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawFees"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawStake"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "AttestorRegistered"
  ): TypedContractEvent<
    AttestorRegisteredEvent.InputTuple,
    AttestorRegisteredEvent.OutputTuple,
    AttestorRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "AttestorStatusUpdated"
  ): TypedContractEvent<
    AttestorStatusUpdatedEvent.InputTuple,
    AttestorStatusUpdatedEvent.OutputTuple,
    AttestorStatusUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "AttestorUpgraded"
  ): TypedContractEvent<
    AttestorUpgradedEvent.InputTuple,
    AttestorUpgradedEvent.OutputTuple,
    AttestorUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "StakeWithdrawn"
  ): TypedContractEvent<
    StakeWithdrawnEvent.InputTuple,
    StakeWithdrawnEvent.OutputTuple,
    StakeWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "TierRequirementsUpdated"
  ): TypedContractEvent<
    TierRequirementsUpdatedEvent.InputTuple,
    TierRequirementsUpdatedEvent.OutputTuple,
    TierRequirementsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "VerificationCompleted"
  ): TypedContractEvent<
    VerificationCompletedEvent.InputTuple,
    VerificationCompletedEvent.OutputTuple,
    VerificationCompletedEvent.OutputObject
  >;
  getEvent(
    key: "VerificationRequested"
  ): TypedContractEvent<
    VerificationRequestedEvent.InputTuple,
    VerificationRequestedEvent.OutputTuple,
    VerificationRequestedEvent.OutputObject
  >;

  filters: {
    "AttestorRegistered(address,uint8,uint256)": TypedContractEvent<
      AttestorRegisteredEvent.InputTuple,
      AttestorRegisteredEvent.OutputTuple,
      AttestorRegisteredEvent.OutputObject
    >;
    AttestorRegistered: TypedContractEvent<
      AttestorRegisteredEvent.InputTuple,
      AttestorRegisteredEvent.OutputTuple,
      AttestorRegisteredEvent.OutputObject
    >;

    "AttestorStatusUpdated(address,uint8)": TypedContractEvent<
      AttestorStatusUpdatedEvent.InputTuple,
      AttestorStatusUpdatedEvent.OutputTuple,
      AttestorStatusUpdatedEvent.OutputObject
    >;
    AttestorStatusUpdated: TypedContractEvent<
      AttestorStatusUpdatedEvent.InputTuple,
      AttestorStatusUpdatedEvent.OutputTuple,
      AttestorStatusUpdatedEvent.OutputObject
    >;

    "AttestorUpgraded(address,uint8,uint8,uint256,uint256)": TypedContractEvent<
      AttestorUpgradedEvent.InputTuple,
      AttestorUpgradedEvent.OutputTuple,
      AttestorUpgradedEvent.OutputObject
    >;
    AttestorUpgraded: TypedContractEvent<
      AttestorUpgradedEvent.InputTuple,
      AttestorUpgradedEvent.OutputTuple,
      AttestorUpgradedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "StakeWithdrawn(address,uint256)": TypedContractEvent<
      StakeWithdrawnEvent.InputTuple,
      StakeWithdrawnEvent.OutputTuple,
      StakeWithdrawnEvent.OutputObject
    >;
    StakeWithdrawn: TypedContractEvent<
      StakeWithdrawnEvent.InputTuple,
      StakeWithdrawnEvent.OutputTuple,
      StakeWithdrawnEvent.OutputObject
    >;

    "TierRequirementsUpdated(uint8,tuple)": TypedContractEvent<
      TierRequirementsUpdatedEvent.InputTuple,
      TierRequirementsUpdatedEvent.OutputTuple,
      TierRequirementsUpdatedEvent.OutputObject
    >;
    TierRequirementsUpdated: TypedContractEvent<
      TierRequirementsUpdatedEvent.InputTuple,
      TierRequirementsUpdatedEvent.OutputTuple,
      TierRequirementsUpdatedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "VerificationCompleted(bytes32,uint8,address)": TypedContractEvent<
      VerificationCompletedEvent.InputTuple,
      VerificationCompletedEvent.OutputTuple,
      VerificationCompletedEvent.OutputObject
    >;
    VerificationCompleted: TypedContractEvent<
      VerificationCompletedEvent.InputTuple,
      VerificationCompletedEvent.OutputTuple,
      VerificationCompletedEvent.OutputObject
    >;

    "VerificationRequested(bytes32,address,bytes32,uint8,uint256,uint256,uint256)": TypedContractEvent<
      VerificationRequestedEvent.InputTuple,
      VerificationRequestedEvent.OutputTuple,
      VerificationRequestedEvent.OutputObject
    >;
    VerificationRequested: TypedContractEvent<
      VerificationRequestedEvent.InputTuple,
      VerificationRequestedEvent.OutputTuple,
      VerificationRequestedEvent.OutputObject
    >;
  };
}
