/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace AssetFactory {
  export type AssetStruct = {
    id: BytesLike;
    owner: AddressLike;
    assetType: string;
    name: string;
    location: string;
    totalValue: BigNumberish;
    tokenSupply: BigNumberish;
    tokenizedAmount: BigNumberish;
    maturityDate: BigNumberish;
    verificationScore: BigNumberish;
    isActive: boolean;
    createdAt: BigNumberish;
    tokenContract: AddressLike;
  };

  export type AssetStructOutput = [
    id: string,
    owner: string,
    assetType: string,
    name: string,
    location: string,
    totalValue: bigint,
    tokenSupply: bigint,
    tokenizedAmount: bigint,
    maturityDate: bigint,
    verificationScore: bigint,
    isActive: boolean,
    createdAt: bigint,
    tokenContract: string
  ] & {
    id: string;
    owner: string;
    assetType: string;
    name: string;
    location: string;
    totalValue: bigint;
    tokenSupply: bigint;
    tokenizedAmount: bigint;
    maturityDate: bigint;
    verificationScore: bigint;
    isActive: boolean;
    createdAt: bigint;
    tokenContract: string;
  };
}

export interface AssetFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "VERIFIER_ROLE"
      | "assets"
      | "countryAssetCount"
      | "feeRecipient"
      | "getAsset"
      | "getRoleAdmin"
      | "getUserAssets"
      | "grantRole"
      | "hasRole"
      | "paused"
      | "renounceRole"
      | "revokeRole"
      | "setTokenizationFee"
      | "setVerificationRegistry"
      | "supportsInterface"
      | "tokenizationFee"
      | "tokenizeAsset"
      | "totalAssetsTokenized"
      | "totalValueLocked"
      | "trustToken"
      | "userAssets"
      | "verificationRegistry"
      | "verifications"
      | "verifyAsset"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AssetMatured"
      | "AssetTokenized"
      | "AssetVerified"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VERIFIER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "assets", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "countryAssetCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getAsset", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAssets",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenizationFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerificationRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenizationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenizeAsset",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAssetsTokenized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalValueLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "trustToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userAssets",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verificationRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifications",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyAsset",
    values: [BytesLike, boolean, boolean, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VERIFIER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "countryAssetCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenizationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerificationRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenizationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenizeAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAssetsTokenized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalValueLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trustToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userAssets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verificationRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifications",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyAsset",
    data: BytesLike
  ): Result;
}

export namespace AssetMaturedEvent {
  export type InputTuple = [assetId: BytesLike, finalValue: BigNumberish];
  export type OutputTuple = [assetId: string, finalValue: bigint];
  export interface OutputObject {
    assetId: string;
    finalValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetTokenizedEvent {
  export type InputTuple = [
    assetId: BytesLike,
    owner: AddressLike,
    assetType: string,
    totalValue: BigNumberish,
    tokenContract: AddressLike
  ];
  export type OutputTuple = [
    assetId: string,
    owner: string,
    assetType: string,
    totalValue: bigint,
    tokenContract: string
  ];
  export interface OutputObject {
    assetId: string;
    owner: string;
    assetType: string;
    totalValue: bigint;
    tokenContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetVerifiedEvent {
  export type InputTuple = [assetId: BytesLike, score: BigNumberish];
  export type OutputTuple = [assetId: string, score: bigint];
  export interface OutputObject {
    assetId: string;
    score: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AssetFactory extends BaseContract {
  connect(runner?: ContractRunner | null): AssetFactory;
  waitForDeployment(): Promise<this>;

  interface: AssetFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  VERIFIER_ROLE: TypedContractMethod<[], [string], "view">;

  assets: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        string
      ] & {
        id: string;
        owner: string;
        assetType: string;
        name: string;
        location: string;
        totalValue: bigint;
        tokenSupply: bigint;
        tokenizedAmount: bigint;
        maturityDate: bigint;
        verificationScore: bigint;
        isActive: boolean;
        createdAt: bigint;
        tokenContract: string;
      }
    ],
    "view"
  >;

  countryAssetCount: TypedContractMethod<[arg0: string], [bigint], "view">;

  feeRecipient: TypedContractMethod<[], [string], "view">;

  getAsset: TypedContractMethod<
    [assetId: BytesLike],
    [AssetFactory.AssetStructOutput],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getUserAssets: TypedContractMethod<[user: AddressLike], [string[]], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setTokenizationFee: TypedContractMethod<
    [newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setVerificationRegistry: TypedContractMethod<
    [_verificationRegistry: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tokenizationFee: TypedContractMethod<[], [bigint], "view">;

  tokenizeAsset: TypedContractMethod<
    [
      assetType: string,
      name: string,
      location: string,
      totalValue: BigNumberish,
      tokenSupply: BigNumberish,
      maturityDate: BigNumberish,
      verificationAssetId: BytesLike
    ],
    [string],
    "payable"
  >;

  totalAssetsTokenized: TypedContractMethod<[], [bigint], "view">;

  totalValueLocked: TypedContractMethod<[], [bigint], "view">;

  trustToken: TypedContractMethod<[], [string], "view">;

  userAssets: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  verificationRegistry: TypedContractMethod<[], [string], "view">;

  verifications: TypedContractMethod<
    [arg0: BytesLike],
    [
      [boolean, boolean, boolean, bigint, string] & {
        satelliteVerified: boolean;
        communityVerified: boolean;
        documentVerified: boolean;
        timestamp: bigint;
        verifier: string;
      }
    ],
    "view"
  >;

  verifyAsset: TypedContractMethod<
    [
      assetId: BytesLike,
      satelliteVerified: boolean,
      communityVerified: boolean,
      documentVerified: boolean
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VERIFIER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "assets"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        string
      ] & {
        id: string;
        owner: string;
        assetType: string;
        name: string;
        location: string;
        totalValue: bigint;
        tokenSupply: bigint;
        tokenizedAmount: bigint;
        maturityDate: bigint;
        verificationScore: bigint;
        isActive: boolean;
        createdAt: bigint;
        tokenContract: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "countryAssetCount"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAsset"
  ): TypedContractMethod<
    [assetId: BytesLike],
    [AssetFactory.AssetStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getUserAssets"
  ): TypedContractMethod<[user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenizationFee"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVerificationRegistry"
  ): TypedContractMethod<
    [_verificationRegistry: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tokenizationFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenizeAsset"
  ): TypedContractMethod<
    [
      assetType: string,
      name: string,
      location: string,
      totalValue: BigNumberish,
      tokenSupply: BigNumberish,
      maturityDate: BigNumberish,
      verificationAssetId: BytesLike
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "totalAssetsTokenized"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalValueLocked"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "trustToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "userAssets"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "verificationRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "verifications"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [boolean, boolean, boolean, bigint, string] & {
        satelliteVerified: boolean;
        communityVerified: boolean;
        documentVerified: boolean;
        timestamp: bigint;
        verifier: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyAsset"
  ): TypedContractMethod<
    [
      assetId: BytesLike,
      satelliteVerified: boolean,
      communityVerified: boolean,
      documentVerified: boolean
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AssetMatured"
  ): TypedContractEvent<
    AssetMaturedEvent.InputTuple,
    AssetMaturedEvent.OutputTuple,
    AssetMaturedEvent.OutputObject
  >;
  getEvent(
    key: "AssetTokenized"
  ): TypedContractEvent<
    AssetTokenizedEvent.InputTuple,
    AssetTokenizedEvent.OutputTuple,
    AssetTokenizedEvent.OutputObject
  >;
  getEvent(
    key: "AssetVerified"
  ): TypedContractEvent<
    AssetVerifiedEvent.InputTuple,
    AssetVerifiedEvent.OutputTuple,
    AssetVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "AssetMatured(bytes32,uint256)": TypedContractEvent<
      AssetMaturedEvent.InputTuple,
      AssetMaturedEvent.OutputTuple,
      AssetMaturedEvent.OutputObject
    >;
    AssetMatured: TypedContractEvent<
      AssetMaturedEvent.InputTuple,
      AssetMaturedEvent.OutputTuple,
      AssetMaturedEvent.OutputObject
    >;

    "AssetTokenized(bytes32,address,string,uint256,address)": TypedContractEvent<
      AssetTokenizedEvent.InputTuple,
      AssetTokenizedEvent.OutputTuple,
      AssetTokenizedEvent.OutputObject
    >;
    AssetTokenized: TypedContractEvent<
      AssetTokenizedEvent.InputTuple,
      AssetTokenizedEvent.OutputTuple,
      AssetTokenizedEvent.OutputObject
    >;

    "AssetVerified(bytes32,uint8)": TypedContractEvent<
      AssetVerifiedEvent.InputTuple,
      AssetVerifiedEvent.OutputTuple,
      AssetVerifiedEvent.OutputObject
    >;
    AssetVerified: TypedContractEvent<
      AssetVerifiedEvent.InputTuple,
      AssetVerifiedEvent.OutputTuple,
      AssetVerifiedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
