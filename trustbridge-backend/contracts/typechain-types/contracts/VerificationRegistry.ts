/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IVerificationRegistry {
  export type VerificationRecordStruct = {
    assetId: BytesLike;
    assetType: BytesLike;
    owner: AddressLike;
    score: BigNumberish;
    evidenceRoot: BytesLike;
    status: BigNumberish;
    createdAt: BigNumberish;
    expiresAt: BigNumberish;
    attestors: AddressLike[];
  };

  export type VerificationRecordStructOutput = [
    assetId: string,
    assetType: string,
    owner: string,
    score: bigint,
    evidenceRoot: string,
    status: bigint,
    createdAt: bigint,
    expiresAt: bigint,
    attestors: string[]
  ] & {
    assetId: string;
    assetType: string;
    owner: string;
    score: bigint;
    evidenceRoot: string;
    status: bigint;
    createdAt: bigint;
    expiresAt: bigint;
    attestors: string[];
  };
}

export interface VerificationRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "GATEWAY_ROLE"
      | "attestorSigned"
      | "getAllVerifications"
      | "getRoleAdmin"
      | "getVerificationCount"
      | "getVerificationStatus"
      | "grantRole"
      | "hasAttestorSigned"
      | "hasRole"
      | "renounceRole"
      | "reviewVerification"
      | "revokeRole"
      | "revokeVerification"
      | "submitVerification"
      | "supportsInterface"
      | "verificationExists"
      | "verificationIds"
      | "verifications"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "VerificationApproved"
      | "VerificationRevoked"
      | "VerificationSubmitted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GATEWAY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "attestorSigned",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllVerifications",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVerificationCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVerificationStatus",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAttestorSigned",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reviewVerification",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeVerification",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "submitVerification",
    values: [
      BytesLike,
      BytesLike,
      AddressLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike[],
      AddressLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verificationExists",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verificationIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifications",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GATEWAY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "attestorSigned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllVerifications",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerificationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerificationStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasAttestorSigned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviewVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verificationExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verificationIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifications",
    data: BytesLike
  ): Result;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerificationApprovedEvent {
  export type InputTuple = [assetId: BytesLike, score: BigNumberish];
  export type OutputTuple = [assetId: string, score: bigint];
  export interface OutputObject {
    assetId: string;
    score: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerificationRevokedEvent {
  export type InputTuple = [assetId: BytesLike, reason: string];
  export type OutputTuple = [assetId: string, reason: string];
  export interface OutputObject {
    assetId: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerificationSubmittedEvent {
  export type InputTuple = [
    assetId: BytesLike,
    assetType: BytesLike,
    score: BigNumberish,
    evidenceRoot: BytesLike
  ];
  export type OutputTuple = [
    assetId: string,
    assetType: string,
    score: bigint,
    evidenceRoot: string
  ];
  export interface OutputObject {
    assetId: string;
    assetType: string;
    score: bigint;
    evidenceRoot: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VerificationRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): VerificationRegistry;
  waitForDeployment(): Promise<this>;

  interface: VerificationRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  GATEWAY_ROLE: TypedContractMethod<[], [string], "view">;

  attestorSigned: TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [boolean],
    "view"
  >;

  getAllVerifications: TypedContractMethod<
    [],
    [IVerificationRegistry.VerificationRecordStructOutput[]],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getVerificationCount: TypedContractMethod<[], [bigint], "view">;

  getVerificationStatus: TypedContractMethod<
    [assetId: BytesLike],
    [
      [boolean, bigint, bigint, bigint] & {
        verified: boolean;
        score: bigint;
        expiresAt: bigint;
        status: bigint;
      }
    ],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasAttestorSigned: TypedContractMethod<
    [assetId: BytesLike, attestor: AddressLike],
    [boolean],
    "view"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  reviewVerification: TypedContractMethod<
    [assetId: BytesLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeVerification: TypedContractMethod<
    [assetId: BytesLike, reason: string],
    [void],
    "nonpayable"
  >;

  submitVerification: TypedContractMethod<
    [
      assetId: BytesLike,
      assetType: BytesLike,
      owner: AddressLike,
      score: BigNumberish,
      evidenceRoot: BytesLike,
      expiresAt: BigNumberish,
      attestorSigs: BytesLike[],
      signingAttestors: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  verificationExists: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  verificationIds: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  verifications: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, bigint, string, bigint, bigint, bigint] & {
        assetId: string;
        assetType: string;
        owner: string;
        score: bigint;
        evidenceRoot: string;
        status: bigint;
        createdAt: bigint;
        expiresAt: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "GATEWAY_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "attestorSigned"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllVerifications"
  ): TypedContractMethod<
    [],
    [IVerificationRegistry.VerificationRecordStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getVerificationCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVerificationStatus"
  ): TypedContractMethod<
    [assetId: BytesLike],
    [
      [boolean, bigint, bigint, bigint] & {
        verified: boolean;
        score: bigint;
        expiresAt: bigint;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasAttestorSigned"
  ): TypedContractMethod<
    [assetId: BytesLike, attestor: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "reviewVerification"
  ): TypedContractMethod<
    [assetId: BytesLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeVerification"
  ): TypedContractMethod<
    [assetId: BytesLike, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitVerification"
  ): TypedContractMethod<
    [
      assetId: BytesLike,
      assetType: BytesLike,
      owner: AddressLike,
      score: BigNumberish,
      evidenceRoot: BytesLike,
      expiresAt: BigNumberish,
      attestorSigs: BytesLike[],
      signingAttestors: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "verificationExists"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "verificationIds"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "verifications"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, bigint, string, bigint, bigint, bigint] & {
        assetId: string;
        assetType: string;
        owner: string;
        score: bigint;
        evidenceRoot: string;
        status: bigint;
        createdAt: bigint;
        expiresAt: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "VerificationApproved"
  ): TypedContractEvent<
    VerificationApprovedEvent.InputTuple,
    VerificationApprovedEvent.OutputTuple,
    VerificationApprovedEvent.OutputObject
  >;
  getEvent(
    key: "VerificationRevoked"
  ): TypedContractEvent<
    VerificationRevokedEvent.InputTuple,
    VerificationRevokedEvent.OutputTuple,
    VerificationRevokedEvent.OutputObject
  >;
  getEvent(
    key: "VerificationSubmitted"
  ): TypedContractEvent<
    VerificationSubmittedEvent.InputTuple,
    VerificationSubmittedEvent.OutputTuple,
    VerificationSubmittedEvent.OutputObject
  >;

  filters: {
    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "VerificationApproved(bytes32,uint256)": TypedContractEvent<
      VerificationApprovedEvent.InputTuple,
      VerificationApprovedEvent.OutputTuple,
      VerificationApprovedEvent.OutputObject
    >;
    VerificationApproved: TypedContractEvent<
      VerificationApprovedEvent.InputTuple,
      VerificationApprovedEvent.OutputTuple,
      VerificationApprovedEvent.OutputObject
    >;

    "VerificationRevoked(bytes32,string)": TypedContractEvent<
      VerificationRevokedEvent.InputTuple,
      VerificationRevokedEvent.OutputTuple,
      VerificationRevokedEvent.OutputObject
    >;
    VerificationRevoked: TypedContractEvent<
      VerificationRevokedEvent.InputTuple,
      VerificationRevokedEvent.OutputTuple,
      VerificationRevokedEvent.OutputObject
    >;

    "VerificationSubmitted(bytes32,bytes32,uint256,bytes32)": TypedContractEvent<
      VerificationSubmittedEvent.InputTuple,
      VerificationSubmittedEvent.OutputTuple,
      VerificationSubmittedEvent.OutputObject
    >;
    VerificationSubmitted: TypedContractEvent<
      VerificationSubmittedEvent.InputTuple,
      VerificationSubmittedEvent.OutputTuple,
      VerificationSubmittedEvent.OutputObject
    >;
  };
}
