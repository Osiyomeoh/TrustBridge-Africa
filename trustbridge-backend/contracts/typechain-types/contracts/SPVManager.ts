/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace SPVManager {
  export type SPVStruct = {
    spvId: BytesLike;
    name: string;
    manager: AddressLike;
    investors: AddressLike[];
    totalCapital: BigNumberish;
    minimumInvestment: BigNumberish;
    maximumInvestors: BigNumberish;
    managementFee: BigNumberish;
    performanceFee: BigNumberish;
    status: BigNumberish;
    createdAt: BigNumberish;
    closedAt: BigNumberish;
    jurisdiction: string;
    complianceStatus: string;
  };

  export type SPVStructOutput = [
    spvId: string,
    name: string,
    manager: string,
    investors: string[],
    totalCapital: bigint,
    minimumInvestment: bigint,
    maximumInvestors: bigint,
    managementFee: bigint,
    performanceFee: bigint,
    status: bigint,
    createdAt: bigint,
    closedAt: bigint,
    jurisdiction: string,
    complianceStatus: string
  ] & {
    spvId: string;
    name: string;
    manager: string;
    investors: string[];
    totalCapital: bigint;
    minimumInvestment: bigint;
    maximumInvestors: bigint;
    managementFee: bigint;
    performanceFee: bigint;
    status: bigint;
    createdAt: bigint;
    closedAt: bigint;
    jurisdiction: string;
    complianceStatus: string;
  };
}

export interface SPVManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "COMPLIANCE_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "MAXIMUM_INVESTORS_PER_SPV"
      | "MINIMUM_SPV_CAPITAL"
      | "SPV_ADMIN_ROLE"
      | "approveInvestment"
      | "createSPV"
      | "feeDistribution"
      | "getInvestorSPVs"
      | "getManagerSPVs"
      | "getRoleAdmin"
      | "getSPV"
      | "getSPVInvestors"
      | "grantRole"
      | "hasRole"
      | "investments"
      | "investorSPVs"
      | "managerSPVs"
      | "proposeInvestment"
      | "rejectInvestment"
      | "renounceRole"
      | "revokeRole"
      | "spvs"
      | "supportsInterface"
      | "totalInvestments"
      | "totalSPVs"
      | "trustToken"
      | "updateComplianceStatus"
      | "updateSPVStatus"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ComplianceUpdated"
      | "InvestmentApproved"
      | "InvestmentProposed"
      | "InvestmentRejected"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SPVCreated"
      | "SPVStatusUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "COMPLIANCE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAXIMUM_INVESTORS_PER_SPV",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINIMUM_SPV_CAPITAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SPV_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveInvestment",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createSPV",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "feeDistribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInvestorSPVs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getManagerSPVs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getSPV", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getSPVInvestors",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "investments",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "investorSPVs",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "managerSPVs",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeInvestment",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectInvestment",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "spvs", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalInvestments",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalSPVs", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "trustToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateComplianceStatus",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSPVStatus",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "COMPLIANCE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAXIMUM_INVESTORS_PER_SPV",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINIMUM_SPV_CAPITAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SPV_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveInvestment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createSPV", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvestorSPVs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getManagerSPVs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSPV", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSPVInvestors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "investments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investorSPVs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managerSPVs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeInvestment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectInvestment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "spvs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalInvestments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalSPVs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "trustToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateComplianceStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSPVStatus",
    data: BytesLike
  ): Result;
}

export namespace ComplianceUpdatedEvent {
  export type InputTuple = [spvId: BytesLike, newStatus: string];
  export type OutputTuple = [spvId: string, newStatus: string];
  export interface OutputObject {
    spvId: string;
    newStatus: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvestmentApprovedEvent {
  export type InputTuple = [investmentId: BytesLike, spvId: BytesLike];
  export type OutputTuple = [investmentId: string, spvId: string];
  export interface OutputObject {
    investmentId: string;
    spvId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvestmentProposedEvent {
  export type InputTuple = [
    investmentId: BytesLike,
    spvId: BytesLike,
    investor: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    investmentId: string,
    spvId: string,
    investor: string,
    amount: bigint
  ];
  export interface OutputObject {
    investmentId: string;
    spvId: string;
    investor: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvestmentRejectedEvent {
  export type InputTuple = [
    investmentId: BytesLike,
    spvId: BytesLike,
    reason: string
  ];
  export type OutputTuple = [
    investmentId: string,
    spvId: string,
    reason: string
  ];
  export interface OutputObject {
    investmentId: string;
    spvId: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SPVCreatedEvent {
  export type InputTuple = [
    spvId: BytesLike,
    manager: AddressLike,
    name: string
  ];
  export type OutputTuple = [spvId: string, manager: string, name: string];
  export interface OutputObject {
    spvId: string;
    manager: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SPVStatusUpdatedEvent {
  export type InputTuple = [
    spvId: BytesLike,
    oldStatus: BigNumberish,
    newStatus: BigNumberish
  ];
  export type OutputTuple = [
    spvId: string,
    oldStatus: bigint,
    newStatus: bigint
  ];
  export interface OutputObject {
    spvId: string;
    oldStatus: bigint;
    newStatus: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SPVManager extends BaseContract {
  connect(runner?: ContractRunner | null): SPVManager;
  waitForDeployment(): Promise<this>;

  interface: SPVManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  COMPLIANCE_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MAXIMUM_INVESTORS_PER_SPV: TypedContractMethod<[], [bigint], "view">;

  MINIMUM_SPV_CAPITAL: TypedContractMethod<[], [bigint], "view">;

  SPV_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  approveInvestment: TypedContractMethod<
    [investmentId: BytesLike],
    [void],
    "nonpayable"
  >;

  createSPV: TypedContractMethod<
    [
      name: string,
      totalCapital: BigNumberish,
      minimumInvestment: BigNumberish,
      maximumInvestors: BigNumberish,
      managementFee: BigNumberish,
      performanceFee: BigNumberish,
      jurisdiction: string
    ],
    [string],
    "nonpayable"
  >;

  feeDistribution: TypedContractMethod<[], [string], "view">;

  getInvestorSPVs: TypedContractMethod<
    [investor: AddressLike],
    [string[]],
    "view"
  >;

  getManagerSPVs: TypedContractMethod<
    [manager: AddressLike],
    [string[]],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getSPV: TypedContractMethod<
    [spvId: BytesLike],
    [SPVManager.SPVStructOutput],
    "view"
  >;

  getSPVInvestors: TypedContractMethod<[spvId: BytesLike], [string[]], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  investments: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, bigint, bigint, bigint] & {
        investmentId: string;
        spvId: string;
        investor: string;
        amount: bigint;
        timestamp: bigint;
        status: bigint;
      }
    ],
    "view"
  >;

  investorSPVs: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  managerSPVs: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  proposeInvestment: TypedContractMethod<
    [spvId: BytesLike, amount: BigNumberish],
    [string],
    "nonpayable"
  >;

  rejectInvestment: TypedContractMethod<
    [investmentId: BytesLike, reason: string],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  spvs: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string
      ] & {
        spvId: string;
        name: string;
        manager: string;
        totalCapital: bigint;
        minimumInvestment: bigint;
        maximumInvestors: bigint;
        managementFee: bigint;
        performanceFee: bigint;
        status: bigint;
        createdAt: bigint;
        closedAt: bigint;
        jurisdiction: string;
        complianceStatus: string;
      }
    ],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  totalInvestments: TypedContractMethod<[], [bigint], "view">;

  totalSPVs: TypedContractMethod<[], [bigint], "view">;

  trustToken: TypedContractMethod<[], [string], "view">;

  updateComplianceStatus: TypedContractMethod<
    [spvId: BytesLike, newStatus: string],
    [void],
    "nonpayable"
  >;

  updateSPVStatus: TypedContractMethod<
    [spvId: BytesLike, newStatus: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "COMPLIANCE_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAXIMUM_INVESTORS_PER_SPV"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MINIMUM_SPV_CAPITAL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SPV_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "approveInvestment"
  ): TypedContractMethod<[investmentId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createSPV"
  ): TypedContractMethod<
    [
      name: string,
      totalCapital: BigNumberish,
      minimumInvestment: BigNumberish,
      maximumInvestors: BigNumberish,
      managementFee: BigNumberish,
      performanceFee: BigNumberish,
      jurisdiction: string
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "feeDistribution"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getInvestorSPVs"
  ): TypedContractMethod<[investor: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getManagerSPVs"
  ): TypedContractMethod<[manager: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getSPV"
  ): TypedContractMethod<
    [spvId: BytesLike],
    [SPVManager.SPVStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSPVInvestors"
  ): TypedContractMethod<[spvId: BytesLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "investments"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, bigint, bigint, bigint] & {
        investmentId: string;
        spvId: string;
        investor: string;
        amount: bigint;
        timestamp: bigint;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "investorSPVs"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "managerSPVs"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "proposeInvestment"
  ): TypedContractMethod<
    [spvId: BytesLike, amount: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rejectInvestment"
  ): TypedContractMethod<
    [investmentId: BytesLike, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "spvs"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string
      ] & {
        spvId: string;
        name: string;
        manager: string;
        totalCapital: bigint;
        minimumInvestment: bigint;
        maximumInvestors: bigint;
        managementFee: bigint;
        performanceFee: bigint;
        status: bigint;
        createdAt: bigint;
        closedAt: bigint;
        jurisdiction: string;
        complianceStatus: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalInvestments"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSPVs"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "trustToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateComplianceStatus"
  ): TypedContractMethod<
    [spvId: BytesLike, newStatus: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateSPVStatus"
  ): TypedContractMethod<
    [spvId: BytesLike, newStatus: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ComplianceUpdated"
  ): TypedContractEvent<
    ComplianceUpdatedEvent.InputTuple,
    ComplianceUpdatedEvent.OutputTuple,
    ComplianceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "InvestmentApproved"
  ): TypedContractEvent<
    InvestmentApprovedEvent.InputTuple,
    InvestmentApprovedEvent.OutputTuple,
    InvestmentApprovedEvent.OutputObject
  >;
  getEvent(
    key: "InvestmentProposed"
  ): TypedContractEvent<
    InvestmentProposedEvent.InputTuple,
    InvestmentProposedEvent.OutputTuple,
    InvestmentProposedEvent.OutputObject
  >;
  getEvent(
    key: "InvestmentRejected"
  ): TypedContractEvent<
    InvestmentRejectedEvent.InputTuple,
    InvestmentRejectedEvent.OutputTuple,
    InvestmentRejectedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SPVCreated"
  ): TypedContractEvent<
    SPVCreatedEvent.InputTuple,
    SPVCreatedEvent.OutputTuple,
    SPVCreatedEvent.OutputObject
  >;
  getEvent(
    key: "SPVStatusUpdated"
  ): TypedContractEvent<
    SPVStatusUpdatedEvent.InputTuple,
    SPVStatusUpdatedEvent.OutputTuple,
    SPVStatusUpdatedEvent.OutputObject
  >;

  filters: {
    "ComplianceUpdated(bytes32,string)": TypedContractEvent<
      ComplianceUpdatedEvent.InputTuple,
      ComplianceUpdatedEvent.OutputTuple,
      ComplianceUpdatedEvent.OutputObject
    >;
    ComplianceUpdated: TypedContractEvent<
      ComplianceUpdatedEvent.InputTuple,
      ComplianceUpdatedEvent.OutputTuple,
      ComplianceUpdatedEvent.OutputObject
    >;

    "InvestmentApproved(bytes32,bytes32)": TypedContractEvent<
      InvestmentApprovedEvent.InputTuple,
      InvestmentApprovedEvent.OutputTuple,
      InvestmentApprovedEvent.OutputObject
    >;
    InvestmentApproved: TypedContractEvent<
      InvestmentApprovedEvent.InputTuple,
      InvestmentApprovedEvent.OutputTuple,
      InvestmentApprovedEvent.OutputObject
    >;

    "InvestmentProposed(bytes32,bytes32,address,uint256)": TypedContractEvent<
      InvestmentProposedEvent.InputTuple,
      InvestmentProposedEvent.OutputTuple,
      InvestmentProposedEvent.OutputObject
    >;
    InvestmentProposed: TypedContractEvent<
      InvestmentProposedEvent.InputTuple,
      InvestmentProposedEvent.OutputTuple,
      InvestmentProposedEvent.OutputObject
    >;

    "InvestmentRejected(bytes32,bytes32,string)": TypedContractEvent<
      InvestmentRejectedEvent.InputTuple,
      InvestmentRejectedEvent.OutputTuple,
      InvestmentRejectedEvent.OutputObject
    >;
    InvestmentRejected: TypedContractEvent<
      InvestmentRejectedEvent.InputTuple,
      InvestmentRejectedEvent.OutputTuple,
      InvestmentRejectedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SPVCreated(bytes32,address,string)": TypedContractEvent<
      SPVCreatedEvent.InputTuple,
      SPVCreatedEvent.OutputTuple,
      SPVCreatedEvent.OutputObject
    >;
    SPVCreated: TypedContractEvent<
      SPVCreatedEvent.InputTuple,
      SPVCreatedEvent.OutputTuple,
      SPVCreatedEvent.OutputObject
    >;

    "SPVStatusUpdated(bytes32,uint8,uint8)": TypedContractEvent<
      SPVStatusUpdatedEvent.InputTuple,
      SPVStatusUpdatedEvent.OutputTuple,
      SPVStatusUpdatedEvent.OutputObject
    >;
    SPVStatusUpdated: TypedContractEvent<
      SPVStatusUpdatedEvent.InputTuple,
      SPVStatusUpdatedEvent.OutputTuple,
      SPVStatusUpdatedEvent.OutputObject
    >;
  };
}
