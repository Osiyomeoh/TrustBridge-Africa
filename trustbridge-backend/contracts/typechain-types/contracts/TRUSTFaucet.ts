/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TRUSTFaucetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "COOLDOWN_PERIOD"
      | "FAUCET_AMOUNT"
      | "MAX_DAILY_AMOUNT"
      | "canUserClaim"
      | "claimTokens"
      | "dailyAmountClaimed"
      | "dailyTotalClaimed"
      | "drainFaucet"
      | "getFaucetStatus"
      | "getUserStatus"
      | "lastRequestTime"
      | "owner"
      | "pause"
      | "paused"
      | "refillFaucet"
      | "renounceOwnership"
      | "transferOwnership"
      | "trustToken"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FaucetDrained"
      | "FaucetRefilled"
      | "OwnershipTransferred"
      | "Paused"
      | "TokensClaimed"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "COOLDOWN_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FAUCET_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_DAILY_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canUserClaim",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dailyAmountClaimed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "dailyTotalClaimed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "drainFaucet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFaucetStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStatus",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastRequestTime",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "refillFaucet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "trustToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "COOLDOWN_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FAUCET_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_DAILY_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canUserClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dailyAmountClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dailyTotalClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "drainFaucet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFaucetStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRequestTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refillFaucet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trustToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace FaucetDrainedEvent {
  export type InputTuple = [drainer: AddressLike, amount: BigNumberish];
  export type OutputTuple = [drainer: string, amount: bigint];
  export interface OutputObject {
    drainer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FaucetRefilledEvent {
  export type InputTuple = [refiller: AddressLike, amount: BigNumberish];
  export type OutputTuple = [refiller: string, amount: bigint];
  export interface OutputObject {
    refiller: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensClaimedEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [user: string, amount: bigint, timestamp: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TRUSTFaucet extends BaseContract {
  connect(runner?: ContractRunner | null): TRUSTFaucet;
  waitForDeployment(): Promise<this>;

  interface: TRUSTFaucetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  COOLDOWN_PERIOD: TypedContractMethod<[], [bigint], "view">;

  FAUCET_AMOUNT: TypedContractMethod<[], [bigint], "view">;

  MAX_DAILY_AMOUNT: TypedContractMethod<[], [bigint], "view">;

  canUserClaim: TypedContractMethod<
    [user: AddressLike],
    [
      [boolean, bigint, bigint] & {
        canClaim: boolean;
        timeUntilNextClaim: bigint;
        availableAmount: bigint;
      }
    ],
    "view"
  >;

  claimTokens: TypedContractMethod<[], [void], "nonpayable">;

  dailyAmountClaimed: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  dailyTotalClaimed: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  drainFaucet: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFaucetStatus: TypedContractMethod<
    [],
    [
      [bigint, bigint, boolean] & {
        balance: bigint;
        dailyTotal: bigint;
        isPaused: boolean;
      }
    ],
    "view"
  >;

  getUserStatus: TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        lastClaimTime: bigint;
        dailyClaimed: bigint;
        timeUntilNextClaim: bigint;
      }
    ],
    "view"
  >;

  lastRequestTime: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  refillFaucet: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  trustToken: TypedContractMethod<[], [string], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "COOLDOWN_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FAUCET_AMOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_DAILY_AMOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "canUserClaim"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [boolean, bigint, bigint] & {
        canClaim: boolean;
        timeUntilNextClaim: bigint;
        availableAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimTokens"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "dailyAmountClaimed"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "dailyTotalClaimed"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "drainFaucet"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getFaucetStatus"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, boolean] & {
        balance: bigint;
        dailyTotal: bigint;
        isPaused: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserStatus"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        lastClaimTime: bigint;
        dailyClaimed: bigint;
        timeUntilNextClaim: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "lastRequestTime"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "refillFaucet"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "trustToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "FaucetDrained"
  ): TypedContractEvent<
    FaucetDrainedEvent.InputTuple,
    FaucetDrainedEvent.OutputTuple,
    FaucetDrainedEvent.OutputObject
  >;
  getEvent(
    key: "FaucetRefilled"
  ): TypedContractEvent<
    FaucetRefilledEvent.InputTuple,
    FaucetRefilledEvent.OutputTuple,
    FaucetRefilledEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "TokensClaimed"
  ): TypedContractEvent<
    TokensClaimedEvent.InputTuple,
    TokensClaimedEvent.OutputTuple,
    TokensClaimedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "FaucetDrained(address,uint256)": TypedContractEvent<
      FaucetDrainedEvent.InputTuple,
      FaucetDrainedEvent.OutputTuple,
      FaucetDrainedEvent.OutputObject
    >;
    FaucetDrained: TypedContractEvent<
      FaucetDrainedEvent.InputTuple,
      FaucetDrainedEvent.OutputTuple,
      FaucetDrainedEvent.OutputObject
    >;

    "FaucetRefilled(address,uint256)": TypedContractEvent<
      FaucetRefilledEvent.InputTuple,
      FaucetRefilledEvent.OutputTuple,
      FaucetRefilledEvent.OutputObject
    >;
    FaucetRefilled: TypedContractEvent<
      FaucetRefilledEvent.InputTuple,
      FaucetRefilledEvent.OutputTuple,
      FaucetRefilledEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "TokensClaimed(address,uint256,uint256)": TypedContractEvent<
      TokensClaimedEvent.InputTuple,
      TokensClaimedEvent.OutputTuple,
      TokensClaimedEvent.OutputObject
    >;
    TokensClaimed: TypedContractEvent<
      TokensClaimedEvent.InputTuple,
      TokensClaimedEvent.OutputTuple,
      TokensClaimedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
