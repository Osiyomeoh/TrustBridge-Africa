/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace AdvancedMinting {
  export type AttributeStruct = {
    name: string;
    value: string;
    rarity: BigNumberish;
  };

  export type AttributeStructOutput = [
    name: string,
    value: string,
    rarity: bigint
  ] & { name: string; value: string; rarity: bigint };

  export type DropStruct = {
    name: string;
    description: string;
    totalSupply: BigNumberish;
    minted: BigNumberish;
    mintPrice: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    isActive: boolean;
    rarity: BigNumberish;
    merkleRoot: BytesLike;
  };

  export type DropStructOutput = [
    name: string,
    description: string,
    totalSupply: bigint,
    minted: bigint,
    mintPrice: bigint,
    startTime: bigint,
    endTime: bigint,
    isActive: boolean,
    rarity: bigint,
    merkleRoot: string
  ] & {
    name: string;
    description: string;
    totalSupply: bigint;
    minted: bigint;
    mintPrice: bigint;
    startTime: bigint;
    endTime: bigint;
    isActive: boolean;
    rarity: bigint;
    merkleRoot: string;
  };
}

export interface AdvancedMintingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "MANAGER_ROLE"
      | "MINTER_ROLE"
      | "assetNFT"
      | "createDrop"
      | "drops"
      | "getDrop"
      | "getRoleAdmin"
      | "getTokenAttributes"
      | "grantRole"
      | "hasRole"
      | "mintFromDrop"
      | "mintWithAttributes"
      | "mintWithRarity"
      | "mintWithWhitelist"
      | "nextDropId"
      | "pause"
      | "paused"
      | "rarityPricing"
      | "renounceRole"
      | "revokeRole"
      | "setRarityPricing"
      | "supportsInterface"
      | "tokenAttributes"
      | "trustToken"
      | "unpause"
      | "whitelistClaimed"
      | "whitelistMerkleRoots"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AttributeMinted"
      | "DropCreated"
      | "DropMinted"
      | "Paused"
      | "RarityMinted"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
      | "WhitelistMinted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "assetNFT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createDrop",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "drops", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getDrop",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAttributes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintFromDrop",
    values: [BigNumberish, BigNumberish, AddressLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithAttributes",
    values: [AddressLike, string, AdvancedMinting.AttributeStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithRarity",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithWhitelist",
    values: [AddressLike, string, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "nextDropId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rarityPricing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRarityPricing",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAttributes",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "trustToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "whitelistClaimed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistMerkleRoots",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assetNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createDrop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "drops", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDrop", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAttributes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintFromDrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintWithAttributes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintWithRarity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintWithWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextDropId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rarityPricing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRarityPricing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenAttributes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trustToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistMerkleRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace AttributeMintedEvent {
  export type InputTuple = [
    to: AddressLike,
    tokenId: BigNumberish,
    attributes: AdvancedMinting.AttributeStruct[]
  ];
  export type OutputTuple = [
    to: string,
    tokenId: bigint,
    attributes: AdvancedMinting.AttributeStructOutput[]
  ];
  export interface OutputObject {
    to: string;
    tokenId: bigint;
    attributes: AdvancedMinting.AttributeStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DropCreatedEvent {
  export type InputTuple = [
    dropId: BigNumberish,
    name: string,
    rarity: BigNumberish,
    totalSupply: BigNumberish
  ];
  export type OutputTuple = [
    dropId: bigint,
    name: string,
    rarity: bigint,
    totalSupply: bigint
  ];
  export interface OutputObject {
    dropId: bigint;
    name: string;
    rarity: bigint;
    totalSupply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DropMintedEvent {
  export type InputTuple = [
    dropId: BigNumberish,
    to: AddressLike,
    tokenIds: BigNumberish[],
    quantity: BigNumberish
  ];
  export type OutputTuple = [
    dropId: bigint,
    to: string,
    tokenIds: bigint[],
    quantity: bigint
  ];
  export interface OutputObject {
    dropId: bigint;
    to: string;
    tokenIds: bigint[];
    quantity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RarityMintedEvent {
  export type InputTuple = [
    to: AddressLike,
    tokenId: BigNumberish,
    rarity: BigNumberish,
    price: BigNumberish
  ];
  export type OutputTuple = [
    to: string,
    tokenId: bigint,
    rarity: bigint,
    price: bigint
  ];
  export interface OutputObject {
    to: string;
    tokenId: bigint;
    rarity: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WhitelistMintedEvent {
  export type InputTuple = [
    to: AddressLike,
    tokenId: BigNumberish,
    merkleRoot: BytesLike
  ];
  export type OutputTuple = [to: string, tokenId: bigint, merkleRoot: string];
  export interface OutputObject {
    to: string;
    tokenId: bigint;
    merkleRoot: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AdvancedMinting extends BaseContract {
  connect(runner?: ContractRunner | null): AdvancedMinting;
  waitForDeployment(): Promise<this>;

  interface: AdvancedMintingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MANAGER_ROLE: TypedContractMethod<[], [string], "view">;

  MINTER_ROLE: TypedContractMethod<[], [string], "view">;

  assetNFT: TypedContractMethod<[], [string], "view">;

  createDrop: TypedContractMethod<
    [
      name: string,
      description: string,
      totalSupply: BigNumberish,
      mintPrice: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish,
      rarity: BigNumberish,
      merkleRoot: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  drops: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        string
      ] & {
        name: string;
        description: string;
        totalSupply: bigint;
        minted: bigint;
        mintPrice: bigint;
        startTime: bigint;
        endTime: bigint;
        isActive: boolean;
        rarity: bigint;
        merkleRoot: string;
      }
    ],
    "view"
  >;

  getDrop: TypedContractMethod<
    [dropId: BigNumberish],
    [AdvancedMinting.DropStructOutput],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTokenAttributes: TypedContractMethod<
    [tokenId: BigNumberish],
    [AdvancedMinting.AttributeStructOutput[]],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  mintFromDrop: TypedContractMethod<
    [
      dropId: BigNumberish,
      quantity: BigNumberish,
      to: AddressLike,
      proof: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  mintWithAttributes: TypedContractMethod<
    [
      to: AddressLike,
      metadataURI: string,
      attributes: AdvancedMinting.AttributeStruct[]
    ],
    [void],
    "nonpayable"
  >;

  mintWithRarity: TypedContractMethod<
    [to: AddressLike, rarity: BigNumberish, metadataURI: string],
    [void],
    "nonpayable"
  >;

  mintWithWhitelist: TypedContractMethod<
    [
      to: AddressLike,
      metadataURI: string,
      merkleRoot: BytesLike,
      proof: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  nextDropId: TypedContractMethod<[], [bigint], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  rarityPricing: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setRarityPricing: TypedContractMethod<
    [rarity: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tokenAttributes: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, string, bigint] & { name: string; value: string; rarity: bigint }
    ],
    "view"
  >;

  trustToken: TypedContractMethod<[], [string], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  whitelistClaimed: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  whitelistMerkleRoots: TypedContractMethod<
    [arg0: BytesLike],
    [boolean],
    "view"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MANAGER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MINTER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "assetNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createDrop"
  ): TypedContractMethod<
    [
      name: string,
      description: string,
      totalSupply: BigNumberish,
      mintPrice: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish,
      rarity: BigNumberish,
      merkleRoot: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "drops"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        string
      ] & {
        name: string;
        description: string;
        totalSupply: bigint;
        minted: bigint;
        mintPrice: bigint;
        startTime: bigint;
        endTime: bigint;
        isActive: boolean;
        rarity: bigint;
        merkleRoot: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDrop"
  ): TypedContractMethod<
    [dropId: BigNumberish],
    [AdvancedMinting.DropStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenAttributes"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [AdvancedMinting.AttributeStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "mintFromDrop"
  ): TypedContractMethod<
    [
      dropId: BigNumberish,
      quantity: BigNumberish,
      to: AddressLike,
      proof: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintWithAttributes"
  ): TypedContractMethod<
    [
      to: AddressLike,
      metadataURI: string,
      attributes: AdvancedMinting.AttributeStruct[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintWithRarity"
  ): TypedContractMethod<
    [to: AddressLike, rarity: BigNumberish, metadataURI: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintWithWhitelist"
  ): TypedContractMethod<
    [
      to: AddressLike,
      metadataURI: string,
      merkleRoot: BytesLike,
      proof: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nextDropId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "rarityPricing"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRarityPricing"
  ): TypedContractMethod<
    [rarity: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tokenAttributes"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, string, bigint] & { name: string; value: string; rarity: bigint }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "trustToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "whitelistClaimed"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "whitelistMerkleRoots"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "AttributeMinted"
  ): TypedContractEvent<
    AttributeMintedEvent.InputTuple,
    AttributeMintedEvent.OutputTuple,
    AttributeMintedEvent.OutputObject
  >;
  getEvent(
    key: "DropCreated"
  ): TypedContractEvent<
    DropCreatedEvent.InputTuple,
    DropCreatedEvent.OutputTuple,
    DropCreatedEvent.OutputObject
  >;
  getEvent(
    key: "DropMinted"
  ): TypedContractEvent<
    DropMintedEvent.InputTuple,
    DropMintedEvent.OutputTuple,
    DropMintedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RarityMinted"
  ): TypedContractEvent<
    RarityMintedEvent.InputTuple,
    RarityMintedEvent.OutputTuple,
    RarityMintedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "WhitelistMinted"
  ): TypedContractEvent<
    WhitelistMintedEvent.InputTuple,
    WhitelistMintedEvent.OutputTuple,
    WhitelistMintedEvent.OutputObject
  >;

  filters: {
    "AttributeMinted(address,uint256,tuple[])": TypedContractEvent<
      AttributeMintedEvent.InputTuple,
      AttributeMintedEvent.OutputTuple,
      AttributeMintedEvent.OutputObject
    >;
    AttributeMinted: TypedContractEvent<
      AttributeMintedEvent.InputTuple,
      AttributeMintedEvent.OutputTuple,
      AttributeMintedEvent.OutputObject
    >;

    "DropCreated(uint256,string,uint8,uint256)": TypedContractEvent<
      DropCreatedEvent.InputTuple,
      DropCreatedEvent.OutputTuple,
      DropCreatedEvent.OutputObject
    >;
    DropCreated: TypedContractEvent<
      DropCreatedEvent.InputTuple,
      DropCreatedEvent.OutputTuple,
      DropCreatedEvent.OutputObject
    >;

    "DropMinted(uint256,address,uint256[],uint256)": TypedContractEvent<
      DropMintedEvent.InputTuple,
      DropMintedEvent.OutputTuple,
      DropMintedEvent.OutputObject
    >;
    DropMinted: TypedContractEvent<
      DropMintedEvent.InputTuple,
      DropMintedEvent.OutputTuple,
      DropMintedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RarityMinted(address,uint256,uint8,uint256)": TypedContractEvent<
      RarityMintedEvent.InputTuple,
      RarityMintedEvent.OutputTuple,
      RarityMintedEvent.OutputObject
    >;
    RarityMinted: TypedContractEvent<
      RarityMintedEvent.InputTuple,
      RarityMintedEvent.OutputTuple,
      RarityMintedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "WhitelistMinted(address,uint256,bytes32)": TypedContractEvent<
      WhitelistMintedEvent.InputTuple,
      WhitelistMintedEvent.OutputTuple,
      WhitelistMintedEvent.OutputObject
    >;
    WhitelistMinted: TypedContractEvent<
      WhitelistMintedEvent.InputTuple,
      WhitelistMintedEvent.OutputTuple,
      WhitelistMintedEvent.OutputObject
    >;
  };
}
