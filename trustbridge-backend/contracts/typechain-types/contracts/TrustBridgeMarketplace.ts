/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TrustBridgeMarketplaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "activeListingCount"
      | "buyNFT"
      | "calculateFees"
      | "cancelListing"
      | "getConfig"
      | "getListing"
      | "isNFTListed"
      | "listNFT"
      | "listings"
      | "nextListingId"
      | "nftToListing"
      | "owner"
      | "platformFeeBps"
      | "platformTreasury"
      | "setPlatformFee"
      | "setPlatformTreasury"
      | "transferOwnership"
      | "trustTokenAddress"
      | "updatePrice"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Listed"
      | "ListingCancelled"
      | "PlatformFeeUpdated"
      | "PriceUpdated"
      | "Sold"
      | "TreasuryUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "activeListingCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyNFT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getConfig", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isNFTListed",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listNFT",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextListingId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftToListing",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformFeeBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "platformTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformTreasury",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "trustTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updatePrice",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "activeListingCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getListing", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isNFTListed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextListingId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftToListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePrice",
    data: BytesLike
  ): Result;
}

export namespace ListedEvent {
  export type InputTuple = [
    listingId: BigNumberish,
    seller: AddressLike,
    nftAddress: AddressLike,
    serialNumber: BigNumberish,
    price: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    listingId: bigint,
    seller: string,
    nftAddress: string,
    serialNumber: bigint,
    price: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    listingId: bigint;
    seller: string;
    nftAddress: string;
    serialNumber: bigint;
    price: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ListingCancelledEvent {
  export type InputTuple = [
    listingId: BigNumberish,
    seller: AddressLike,
    nftAddress: AddressLike,
    serialNumber: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    listingId: bigint,
    seller: string,
    nftAddress: string,
    serialNumber: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    listingId: bigint;
    seller: string;
    nftAddress: string;
    serialNumber: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlatformFeeUpdatedEvent {
  export type InputTuple = [oldFee: BigNumberish, newFee: BigNumberish];
  export type OutputTuple = [oldFee: bigint, newFee: bigint];
  export interface OutputObject {
    oldFee: bigint;
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceUpdatedEvent {
  export type InputTuple = [
    listingId: BigNumberish,
    oldPrice: BigNumberish,
    newPrice: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    listingId: bigint,
    oldPrice: bigint,
    newPrice: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    listingId: bigint;
    oldPrice: bigint;
    newPrice: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SoldEvent {
  export type InputTuple = [
    listingId: BigNumberish,
    seller: AddressLike,
    buyer: AddressLike,
    nftAddress: AddressLike,
    serialNumber: BigNumberish,
    price: BigNumberish,
    platformFee: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    listingId: bigint,
    seller: string,
    buyer: string,
    nftAddress: string,
    serialNumber: bigint,
    price: bigint,
    platformFee: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    listingId: bigint;
    seller: string;
    buyer: string;
    nftAddress: string;
    serialNumber: bigint;
    price: bigint;
    platformFee: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasuryUpdatedEvent {
  export type InputTuple = [oldTreasury: AddressLike, newTreasury: AddressLike];
  export type OutputTuple = [oldTreasury: string, newTreasury: string];
  export interface OutputObject {
    oldTreasury: string;
    newTreasury: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TrustBridgeMarketplace extends BaseContract {
  connect(runner?: ContractRunner | null): TrustBridgeMarketplace;
  waitForDeployment(): Promise<this>;

  interface: TrustBridgeMarketplaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  activeListingCount: TypedContractMethod<[], [bigint], "view">;

  buyNFT: TypedContractMethod<[_listingId: BigNumberish], [void], "nonpayable">;

  calculateFees: TypedContractMethod<
    [_price: BigNumberish],
    [[bigint, bigint] & { platformFee: bigint; sellerAmount: bigint }],
    "view"
  >;

  cancelListing: TypedContractMethod<
    [_listingId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getConfig: TypedContractMethod<
    [],
    [
      [string, string, bigint, string, bigint] & {
        _trustToken: string;
        _treasury: string;
        _feeBps: bigint;
        _owner: string;
        _activeListings: bigint;
      }
    ],
    "view"
  >;

  getListing: TypedContractMethod<
    [_listingId: BigNumberish],
    [
      [string, string, bigint, bigint, boolean, bigint] & {
        seller: string;
        nftAddress: string;
        serialNumber: bigint;
        price: bigint;
        isActive: boolean;
        listedAt: bigint;
      }
    ],
    "view"
  >;

  isNFTListed: TypedContractMethod<
    [_nftAddress: AddressLike, _serialNumber: BigNumberish],
    [[boolean, bigint]],
    "view"
  >;

  listNFT: TypedContractMethod<
    [
      _nftAddress: AddressLike,
      _serialNumber: BigNumberish,
      _price: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  listings: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, bigint, boolean, bigint] & {
        listingId: bigint;
        seller: string;
        nftAddress: string;
        serialNumber: bigint;
        price: bigint;
        isActive: boolean;
        listedAt: bigint;
      }
    ],
    "view"
  >;

  nextListingId: TypedContractMethod<[], [bigint], "view">;

  nftToListing: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  platformFeeBps: TypedContractMethod<[], [bigint], "view">;

  platformTreasury: TypedContractMethod<[], [string], "view">;

  setPlatformFee: TypedContractMethod<
    [_newFeeBps: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPlatformTreasury: TypedContractMethod<
    [_newTreasury: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [_newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  trustTokenAddress: TypedContractMethod<[], [string], "view">;

  updatePrice: TypedContractMethod<
    [_listingId: BigNumberish, _newPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "activeListingCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "buyNFT"
  ): TypedContractMethod<[_listingId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "calculateFees"
  ): TypedContractMethod<
    [_price: BigNumberish],
    [[bigint, bigint] & { platformFee: bigint; sellerAmount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "cancelListing"
  ): TypedContractMethod<[_listingId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getConfig"
  ): TypedContractMethod<
    [],
    [
      [string, string, bigint, string, bigint] & {
        _trustToken: string;
        _treasury: string;
        _feeBps: bigint;
        _owner: string;
        _activeListings: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getListing"
  ): TypedContractMethod<
    [_listingId: BigNumberish],
    [
      [string, string, bigint, bigint, boolean, bigint] & {
        seller: string;
        nftAddress: string;
        serialNumber: bigint;
        price: bigint;
        isActive: boolean;
        listedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isNFTListed"
  ): TypedContractMethod<
    [_nftAddress: AddressLike, _serialNumber: BigNumberish],
    [[boolean, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "listNFT"
  ): TypedContractMethod<
    [
      _nftAddress: AddressLike,
      _serialNumber: BigNumberish,
      _price: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "listings"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, bigint, boolean, bigint] & {
        listingId: bigint;
        seller: string;
        nftAddress: string;
        serialNumber: bigint;
        price: bigint;
        isActive: boolean;
        listedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextListingId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nftToListing"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "platformFeeBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "platformTreasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setPlatformFee"
  ): TypedContractMethod<[_newFeeBps: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPlatformTreasury"
  ): TypedContractMethod<[_newTreasury: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[_newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "trustTokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updatePrice"
  ): TypedContractMethod<
    [_listingId: BigNumberish, _newPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Listed"
  ): TypedContractEvent<
    ListedEvent.InputTuple,
    ListedEvent.OutputTuple,
    ListedEvent.OutputObject
  >;
  getEvent(
    key: "ListingCancelled"
  ): TypedContractEvent<
    ListingCancelledEvent.InputTuple,
    ListingCancelledEvent.OutputTuple,
    ListingCancelledEvent.OutputObject
  >;
  getEvent(
    key: "PlatformFeeUpdated"
  ): TypedContractEvent<
    PlatformFeeUpdatedEvent.InputTuple,
    PlatformFeeUpdatedEvent.OutputTuple,
    PlatformFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PriceUpdated"
  ): TypedContractEvent<
    PriceUpdatedEvent.InputTuple,
    PriceUpdatedEvent.OutputTuple,
    PriceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Sold"
  ): TypedContractEvent<
    SoldEvent.InputTuple,
    SoldEvent.OutputTuple,
    SoldEvent.OutputObject
  >;
  getEvent(
    key: "TreasuryUpdated"
  ): TypedContractEvent<
    TreasuryUpdatedEvent.InputTuple,
    TreasuryUpdatedEvent.OutputTuple,
    TreasuryUpdatedEvent.OutputObject
  >;

  filters: {
    "Listed(uint256,address,address,uint256,uint256,uint256)": TypedContractEvent<
      ListedEvent.InputTuple,
      ListedEvent.OutputTuple,
      ListedEvent.OutputObject
    >;
    Listed: TypedContractEvent<
      ListedEvent.InputTuple,
      ListedEvent.OutputTuple,
      ListedEvent.OutputObject
    >;

    "ListingCancelled(uint256,address,address,uint256,uint256)": TypedContractEvent<
      ListingCancelledEvent.InputTuple,
      ListingCancelledEvent.OutputTuple,
      ListingCancelledEvent.OutputObject
    >;
    ListingCancelled: TypedContractEvent<
      ListingCancelledEvent.InputTuple,
      ListingCancelledEvent.OutputTuple,
      ListingCancelledEvent.OutputObject
    >;

    "PlatformFeeUpdated(uint256,uint256)": TypedContractEvent<
      PlatformFeeUpdatedEvent.InputTuple,
      PlatformFeeUpdatedEvent.OutputTuple,
      PlatformFeeUpdatedEvent.OutputObject
    >;
    PlatformFeeUpdated: TypedContractEvent<
      PlatformFeeUpdatedEvent.InputTuple,
      PlatformFeeUpdatedEvent.OutputTuple,
      PlatformFeeUpdatedEvent.OutputObject
    >;

    "PriceUpdated(uint256,uint256,uint256,uint256)": TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;
    PriceUpdated: TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;

    "Sold(uint256,address,address,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      SoldEvent.InputTuple,
      SoldEvent.OutputTuple,
      SoldEvent.OutputObject
    >;
    Sold: TypedContractEvent<
      SoldEvent.InputTuple,
      SoldEvent.OutputTuple,
      SoldEvent.OutputObject
    >;

    "TreasuryUpdated(address,address)": TypedContractEvent<
      TreasuryUpdatedEvent.InputTuple,
      TreasuryUpdatedEvent.OutputTuple,
      TreasuryUpdatedEvent.OutputObject
    >;
    TreasuryUpdated: TypedContractEvent<
      TreasuryUpdatedEvent.InputTuple,
      TreasuryUpdatedEvent.OutputTuple,
      TreasuryUpdatedEvent.OutputObject
    >;
  };
}
