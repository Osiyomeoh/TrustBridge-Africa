/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface PoolManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "AMC_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "MANAGER_ROLE"
      | "addAssetToPool"
      | "assetFactory"
      | "assetToPool"
      | "createPool"
      | "getPool"
      | "getRoleAdmin"
      | "getUserInvestment"
      | "getUserPools"
      | "getUserShares"
      | "grantRole"
      | "hasRole"
      | "investInPool"
      | "pause"
      | "paused"
      | "pools"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "totalPools"
      | "totalValueLocked"
      | "tradePoolTokens"
      | "trustToken"
      | "unpause"
      | "userPools"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AssetAddedToPool"
      | "Paused"
      | "PoolCreated"
      | "PoolTokenIssued"
      | "PoolTokenTraded"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(functionFragment: "AMC_ROLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAssetToPool",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assetFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetToPool",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createPool",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getPool", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserInvestment",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPools",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserShares",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "investInPool",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pools", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalPools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalValueLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradePoolTokens",
    values: [BytesLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "trustToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userPools",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "AMC_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAssetToPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetToPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserInvestment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "investInPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalValueLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradePoolTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trustToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userPools", data: BytesLike): Result;
}

export namespace AssetAddedToPoolEvent {
  export type InputTuple = [
    poolId: BytesLike,
    assetId: BytesLike,
    amc: AddressLike
  ];
  export type OutputTuple = [poolId: string, assetId: string, amc: string];
  export interface OutputObject {
    poolId: string;
    assetId: string;
    amc: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolCreatedEvent {
  export type InputTuple = [
    poolId: BytesLike,
    creator: AddressLike,
    name: string,
    totalValue: BigNumberish
  ];
  export type OutputTuple = [
    poolId: string,
    creator: string,
    name: string,
    totalValue: bigint
  ];
  export interface OutputObject {
    poolId: string;
    creator: string;
    name: string;
    totalValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolTokenIssuedEvent {
  export type InputTuple = [
    poolId: BytesLike,
    investor: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [poolId: string, investor: string, amount: bigint];
  export interface OutputObject {
    poolId: string;
    investor: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolTokenTradedEvent {
  export type InputTuple = [
    poolId: BytesLike,
    seller: AddressLike,
    buyer: AddressLike,
    amount: BigNumberish,
    price: BigNumberish
  ];
  export type OutputTuple = [
    poolId: string,
    seller: string,
    buyer: string,
    amount: bigint,
    price: bigint
  ];
  export interface OutputObject {
    poolId: string;
    seller: string;
    buyer: string;
    amount: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PoolManager extends BaseContract {
  connect(runner?: ContractRunner | null): PoolManager;
  waitForDeployment(): Promise<this>;

  interface: PoolManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  AMC_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MANAGER_ROLE: TypedContractMethod<[], [string], "view">;

  addAssetToPool: TypedContractMethod<
    [_poolId: BytesLike, _assetId: BytesLike],
    [void],
    "nonpayable"
  >;

  assetFactory: TypedContractMethod<[], [string], "view">;

  assetToPool: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  createPool: TypedContractMethod<
    [
      _name: string,
      _description: string,
      _managementFee: BigNumberish,
      _performanceFee: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  getPool: TypedContractMethod<
    [_poolId: BytesLike],
    [
      [
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        string[]
      ] & {
        poolId: string;
        creator: string;
        name: string;
        description: string;
        totalValue: bigint;
        totalShares: bigint;
        managementFee: bigint;
        performanceFee: bigint;
        isActive: boolean;
        createdAt: bigint;
        assets: string[];
      }
    ],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getUserInvestment: TypedContractMethod<
    [_poolId: BytesLike, _user: AddressLike],
    [bigint],
    "view"
  >;

  getUserPools: TypedContractMethod<[_user: AddressLike], [string[]], "view">;

  getUserShares: TypedContractMethod<
    [_poolId: BytesLike, _user: AddressLike],
    [bigint],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  investInPool: TypedContractMethod<
    [_poolId: BytesLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  pools: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint
      ] & {
        poolId: string;
        creator: string;
        name: string;
        description: string;
        totalValue: bigint;
        totalShares: bigint;
        managementFee: bigint;
        performanceFee: bigint;
        isActive: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  totalPools: TypedContractMethod<[], [bigint], "view">;

  totalValueLocked: TypedContractMethod<[], [bigint], "view">;

  tradePoolTokens: TypedContractMethod<
    [
      _poolId: BytesLike,
      _buyer: AddressLike,
      _amount: BigNumberish,
      _price: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  trustToken: TypedContractMethod<[], [string], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  userPools: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "AMC_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MANAGER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addAssetToPool"
  ): TypedContractMethod<
    [_poolId: BytesLike, _assetId: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "assetFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "assetToPool"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "createPool"
  ): TypedContractMethod<
    [
      _name: string,
      _description: string,
      _managementFee: BigNumberish,
      _performanceFee: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getPool"
  ): TypedContractMethod<
    [_poolId: BytesLike],
    [
      [
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        string[]
      ] & {
        poolId: string;
        creator: string;
        name: string;
        description: string;
        totalValue: bigint;
        totalShares: bigint;
        managementFee: bigint;
        performanceFee: bigint;
        isActive: boolean;
        createdAt: bigint;
        assets: string[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getUserInvestment"
  ): TypedContractMethod<
    [_poolId: BytesLike, _user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserPools"
  ): TypedContractMethod<[_user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getUserShares"
  ): TypedContractMethod<
    [_poolId: BytesLike, _user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "investInPool"
  ): TypedContractMethod<
    [_poolId: BytesLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pools"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint
      ] & {
        poolId: string;
        creator: string;
        name: string;
        description: string;
        totalValue: bigint;
        totalShares: bigint;
        managementFee: bigint;
        performanceFee: bigint;
        isActive: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalPools"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalValueLocked"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tradePoolTokens"
  ): TypedContractMethod<
    [
      _poolId: BytesLike,
      _buyer: AddressLike,
      _amount: BigNumberish,
      _price: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "trustToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userPools"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getEvent(
    key: "AssetAddedToPool"
  ): TypedContractEvent<
    AssetAddedToPoolEvent.InputTuple,
    AssetAddedToPoolEvent.OutputTuple,
    AssetAddedToPoolEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PoolCreated"
  ): TypedContractEvent<
    PoolCreatedEvent.InputTuple,
    PoolCreatedEvent.OutputTuple,
    PoolCreatedEvent.OutputObject
  >;
  getEvent(
    key: "PoolTokenIssued"
  ): TypedContractEvent<
    PoolTokenIssuedEvent.InputTuple,
    PoolTokenIssuedEvent.OutputTuple,
    PoolTokenIssuedEvent.OutputObject
  >;
  getEvent(
    key: "PoolTokenTraded"
  ): TypedContractEvent<
    PoolTokenTradedEvent.InputTuple,
    PoolTokenTradedEvent.OutputTuple,
    PoolTokenTradedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "AssetAddedToPool(bytes32,bytes32,address)": TypedContractEvent<
      AssetAddedToPoolEvent.InputTuple,
      AssetAddedToPoolEvent.OutputTuple,
      AssetAddedToPoolEvent.OutputObject
    >;
    AssetAddedToPool: TypedContractEvent<
      AssetAddedToPoolEvent.InputTuple,
      AssetAddedToPoolEvent.OutputTuple,
      AssetAddedToPoolEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PoolCreated(bytes32,address,string,uint256)": TypedContractEvent<
      PoolCreatedEvent.InputTuple,
      PoolCreatedEvent.OutputTuple,
      PoolCreatedEvent.OutputObject
    >;
    PoolCreated: TypedContractEvent<
      PoolCreatedEvent.InputTuple,
      PoolCreatedEvent.OutputTuple,
      PoolCreatedEvent.OutputObject
    >;

    "PoolTokenIssued(bytes32,address,uint256)": TypedContractEvent<
      PoolTokenIssuedEvent.InputTuple,
      PoolTokenIssuedEvent.OutputTuple,
      PoolTokenIssuedEvent.OutputObject
    >;
    PoolTokenIssued: TypedContractEvent<
      PoolTokenIssuedEvent.InputTuple,
      PoolTokenIssuedEvent.OutputTuple,
      PoolTokenIssuedEvent.OutputObject
    >;

    "PoolTokenTraded(bytes32,address,address,uint256,uint256)": TypedContractEvent<
      PoolTokenTradedEvent.InputTuple,
      PoolTokenTradedEvent.OutputTuple,
      PoolTokenTradedEvent.OutputObject
    >;
    PoolTokenTraded: TypedContractEvent<
      PoolTokenTradedEvent.InputTuple,
      PoolTokenTradedEvent.OutputTuple,
      PoolTokenTradedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
