/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IAttestorManager {
  export type AttestorInfoStruct = {
    isActive: boolean;
    stakeAmount: BigNumberish;
    reputationScore: BigNumberish;
    organizationType: string;
    country: string;
    totalAttestations: BigNumberish;
    correctAttestations: BigNumberish;
  };

  export type AttestorInfoStructOutput = [
    isActive: boolean,
    stakeAmount: bigint,
    reputationScore: bigint,
    organizationType: string,
    country: string,
    totalAttestations: bigint,
    correctAttestations: bigint
  ] & {
    isActive: boolean;
    stakeAmount: bigint;
    reputationScore: bigint;
    organizationType: string;
    country: string;
    totalAttestations: bigint;
    correctAttestations: bigint;
  };
}

export interface AttestorManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ATTESTOR_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "MANAGER_ROLE"
      | "attestors"
      | "getAttestorInfo"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "incrementAttestationCount"
      | "isAttestorActive"
      | "registerAttestor"
      | "renounceRole"
      | "revokeRole"
      | "slashAttestor"
      | "slashedAmount"
      | "supportsInterface"
      | "totalStakedAmount"
      | "updateAttestorReputation"
      | "withdrawSlashedFunds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AttestorRegistered"
      | "AttestorReputationUpdated"
      | "AttestorSlashed"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ATTESTOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "attestors",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAttestorInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "incrementAttestationCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAttestorActive",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAttestor",
    values: [AddressLike, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "slashAttestor",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "slashedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateAttestorReputation",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSlashedFunds",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ATTESTOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "attestors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAttestorInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "incrementAttestationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAttestorActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAttestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "slashAttestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStakedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAttestorReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSlashedFunds",
    data: BytesLike
  ): Result;
}

export namespace AttestorRegisteredEvent {
  export type InputTuple = [
    attestor: AddressLike,
    organizationType: string,
    stakeAmount: BigNumberish
  ];
  export type OutputTuple = [
    attestor: string,
    organizationType: string,
    stakeAmount: bigint
  ];
  export interface OutputObject {
    attestor: string;
    organizationType: string;
    stakeAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AttestorReputationUpdatedEvent {
  export type InputTuple = [attestor: AddressLike, newScore: BigNumberish];
  export type OutputTuple = [attestor: string, newScore: bigint];
  export interface OutputObject {
    attestor: string;
    newScore: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AttestorSlashedEvent {
  export type InputTuple = [
    attestor: AddressLike,
    amount: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [attestor: string, amount: bigint, reason: string];
  export interface OutputObject {
    attestor: string;
    amount: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AttestorManager extends BaseContract {
  connect(runner?: ContractRunner | null): AttestorManager;
  waitForDeployment(): Promise<this>;

  interface: AttestorManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ATTESTOR_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MANAGER_ROLE: TypedContractMethod<[], [string], "view">;

  attestors: TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint, string, string, bigint, bigint] & {
        isActive: boolean;
        stakeAmount: bigint;
        reputationScore: bigint;
        organizationType: string;
        country: string;
        totalAttestations: bigint;
        correctAttestations: bigint;
      }
    ],
    "view"
  >;

  getAttestorInfo: TypedContractMethod<
    [attestor: AddressLike],
    [IAttestorManager.AttestorInfoStructOutput],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  incrementAttestationCount: TypedContractMethod<
    [attestor: AddressLike],
    [void],
    "nonpayable"
  >;

  isAttestorActive: TypedContractMethod<
    [attestor: AddressLike],
    [boolean],
    "view"
  >;

  registerAttestor: TypedContractMethod<
    [
      attestor: AddressLike,
      organizationType: string,
      country: string,
      initialStake: BigNumberish
    ],
    [void],
    "payable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  slashAttestor: TypedContractMethod<
    [attestor: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;

  slashedAmount: TypedContractMethod<[], [bigint], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  totalStakedAmount: TypedContractMethod<[], [bigint], "view">;

  updateAttestorReputation: TypedContractMethod<
    [attestor: AddressLike, wasCorrect: boolean],
    [void],
    "nonpayable"
  >;

  withdrawSlashedFunds: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ATTESTOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MANAGER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "attestors"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint, string, string, bigint, bigint] & {
        isActive: boolean;
        stakeAmount: bigint;
        reputationScore: bigint;
        organizationType: string;
        country: string;
        totalAttestations: bigint;
        correctAttestations: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAttestorInfo"
  ): TypedContractMethod<
    [attestor: AddressLike],
    [IAttestorManager.AttestorInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "incrementAttestationCount"
  ): TypedContractMethod<[attestor: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isAttestorActive"
  ): TypedContractMethod<[attestor: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerAttestor"
  ): TypedContractMethod<
    [
      attestor: AddressLike,
      organizationType: string,
      country: string,
      initialStake: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "slashAttestor"
  ): TypedContractMethod<
    [attestor: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "slashedAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalStakedAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateAttestorReputation"
  ): TypedContractMethod<
    [attestor: AddressLike, wasCorrect: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawSlashedFunds"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "AttestorRegistered"
  ): TypedContractEvent<
    AttestorRegisteredEvent.InputTuple,
    AttestorRegisteredEvent.OutputTuple,
    AttestorRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "AttestorReputationUpdated"
  ): TypedContractEvent<
    AttestorReputationUpdatedEvent.InputTuple,
    AttestorReputationUpdatedEvent.OutputTuple,
    AttestorReputationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "AttestorSlashed"
  ): TypedContractEvent<
    AttestorSlashedEvent.InputTuple,
    AttestorSlashedEvent.OutputTuple,
    AttestorSlashedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "AttestorRegistered(address,string,uint256)": TypedContractEvent<
      AttestorRegisteredEvent.InputTuple,
      AttestorRegisteredEvent.OutputTuple,
      AttestorRegisteredEvent.OutputObject
    >;
    AttestorRegistered: TypedContractEvent<
      AttestorRegisteredEvent.InputTuple,
      AttestorRegisteredEvent.OutputTuple,
      AttestorRegisteredEvent.OutputObject
    >;

    "AttestorReputationUpdated(address,uint256)": TypedContractEvent<
      AttestorReputationUpdatedEvent.InputTuple,
      AttestorReputationUpdatedEvent.OutputTuple,
      AttestorReputationUpdatedEvent.OutputObject
    >;
    AttestorReputationUpdated: TypedContractEvent<
      AttestorReputationUpdatedEvent.InputTuple,
      AttestorReputationUpdatedEvent.OutputTuple,
      AttestorReputationUpdatedEvent.OutputObject
    >;

    "AttestorSlashed(address,uint256,string)": TypedContractEvent<
      AttestorSlashedEvent.InputTuple,
      AttestorSlashedEvent.OutputTuple,
      AttestorSlashedEvent.OutputObject
    >;
    AttestorSlashed: TypedContractEvent<
      AttestorSlashedEvent.InputTuple,
      AttestorSlashedEvent.OutputTuple,
      AttestorSlashedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
