/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TradingEngineInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "MATCHER_ROLE"
      | "TRADER_ROLE"
      | "TRADING_FEE_RATE"
      | "acceptOfferOnDigitalAsset"
      | "assetFactory"
      | "assetOffers"
      | "buyDigitalAsset"
      | "delistDigitalAsset"
      | "digitalListings"
      | "digitalOffers"
      | "getActiveListings"
      | "getDigitalAssetOffers"
      | "getRoleAdmin"
      | "getUserBalance"
      | "grantRole"
      | "hasRole"
      | "listDigitalAssetForSale"
      | "makeOfferOnDigitalAsset"
      | "pause"
      | "paused"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "trustToken"
      | "unpause"
      | "userBalances"
      | "withdrawBalance"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DigitalAssetDelisted"
      | "DigitalAssetListed"
      | "DigitalAssetOfferAccepted"
      | "DigitalAssetOfferMade"
      | "DigitalAssetSold"
      | "DigitalAssetTraded"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MATCHER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRADER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRADING_FEE_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOfferOnDigitalAsset",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assetFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetOffers",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyDigitalAsset",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delistDigitalAsset",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "digitalListings",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "digitalOffers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveListings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDigitalAssetOffers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "listDigitalAssetForSale",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "makeOfferOnDigitalAsset",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "trustToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userBalances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBalance",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MATCHER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRADER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRADING_FEE_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOfferOnDigitalAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyDigitalAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delistDigitalAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "digitalListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "digitalOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDigitalAssetOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listDigitalAssetForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeOfferOnDigitalAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trustToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBalance",
    data: BytesLike
  ): Result;
}

export namespace DigitalAssetDelistedEvent {
  export type InputTuple = [assetId: BytesLike, seller: AddressLike];
  export type OutputTuple = [assetId: string, seller: string];
  export interface OutputObject {
    assetId: string;
    seller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DigitalAssetListedEvent {
  export type InputTuple = [
    assetId: BytesLike,
    seller: AddressLike,
    price: BigNumberish,
    expiry: BigNumberish
  ];
  export type OutputTuple = [
    assetId: string,
    seller: string,
    price: bigint,
    expiry: bigint
  ];
  export interface OutputObject {
    assetId: string;
    seller: string;
    price: bigint;
    expiry: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DigitalAssetOfferAcceptedEvent {
  export type InputTuple = [
    offerId: BytesLike,
    buyer: AddressLike,
    seller: AddressLike,
    assetId: BytesLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    offerId: string,
    buyer: string,
    seller: string,
    assetId: string,
    amount: bigint
  ];
  export interface OutputObject {
    offerId: string;
    buyer: string;
    seller: string;
    assetId: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DigitalAssetOfferMadeEvent {
  export type InputTuple = [
    offerId: BytesLike,
    buyer: AddressLike,
    assetId: BytesLike,
    offerAmount: BigNumberish,
    expiry: BigNumberish
  ];
  export type OutputTuple = [
    offerId: string,
    buyer: string,
    assetId: string,
    offerAmount: bigint,
    expiry: bigint
  ];
  export interface OutputObject {
    offerId: string;
    buyer: string;
    assetId: string;
    offerAmount: bigint;
    expiry: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DigitalAssetSoldEvent {
  export type InputTuple = [
    assetId: BytesLike,
    buyer: AddressLike,
    seller: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [
    assetId: string,
    buyer: string,
    seller: string,
    price: bigint
  ];
  export interface OutputObject {
    assetId: string;
    buyer: string;
    seller: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DigitalAssetTradedEvent {
  export type InputTuple = [
    assetId: BytesLike,
    buyer: AddressLike,
    seller: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [
    assetId: string,
    buyer: string,
    seller: string,
    price: bigint
  ];
  export interface OutputObject {
    assetId: string;
    buyer: string;
    seller: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TradingEngine extends BaseContract {
  connect(runner?: ContractRunner | null): TradingEngine;
  waitForDeployment(): Promise<this>;

  interface: TradingEngineInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MATCHER_ROLE: TypedContractMethod<[], [string], "view">;

  TRADER_ROLE: TypedContractMethod<[], [string], "view">;

  TRADING_FEE_RATE: TypedContractMethod<[], [bigint], "view">;

  acceptOfferOnDigitalAsset: TypedContractMethod<
    [_offerId: BytesLike],
    [void],
    "nonpayable"
  >;

  assetFactory: TypedContractMethod<[], [string], "view">;

  assetOffers: TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  buyDigitalAsset: TypedContractMethod<
    [_assetId: BytesLike],
    [void],
    "nonpayable"
  >;

  delistDigitalAsset: TypedContractMethod<
    [_assetId: BytesLike],
    [void],
    "nonpayable"
  >;

  digitalListings: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, bigint, boolean] & {
        assetId: string;
        seller: string;
        price: bigint;
        expiry: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  digitalOffers: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, bigint, bigint, boolean] & {
        offerId: string;
        buyer: string;
        assetId: string;
        offerAmount: bigint;
        expiry: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  getActiveListings: TypedContractMethod<[], [string[]], "view">;

  getDigitalAssetOffers: TypedContractMethod<
    [_assetId: BytesLike],
    [string[]],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getUserBalance: TypedContractMethod<[_user: AddressLike], [bigint], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  listDigitalAssetForSale: TypedContractMethod<
    [_assetId: BytesLike, _price: BigNumberish, _expiry: BigNumberish],
    [void],
    "nonpayable"
  >;

  makeOfferOnDigitalAsset: TypedContractMethod<
    [_assetId: BytesLike, _offerAmount: BigNumberish, _expiry: BigNumberish],
    [void],
    "nonpayable"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  trustToken: TypedContractMethod<[], [string], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  userBalances: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  withdrawBalance: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MATCHER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TRADER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TRADING_FEE_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "acceptOfferOnDigitalAsset"
  ): TypedContractMethod<[_offerId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "assetFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "assetOffers"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "buyDigitalAsset"
  ): TypedContractMethod<[_assetId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "delistDigitalAsset"
  ): TypedContractMethod<[_assetId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "digitalListings"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, bigint, boolean] & {
        assetId: string;
        seller: string;
        price: bigint;
        expiry: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "digitalOffers"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, bigint, bigint, boolean] & {
        offerId: string;
        buyer: string;
        assetId: string;
        offerAmount: bigint;
        expiry: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getActiveListings"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getDigitalAssetOffers"
  ): TypedContractMethod<[_assetId: BytesLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getUserBalance"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "listDigitalAssetForSale"
  ): TypedContractMethod<
    [_assetId: BytesLike, _price: BigNumberish, _expiry: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "makeOfferOnDigitalAsset"
  ): TypedContractMethod<
    [_assetId: BytesLike, _offerAmount: BigNumberish, _expiry: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "trustToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userBalances"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawBalance"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "DigitalAssetDelisted"
  ): TypedContractEvent<
    DigitalAssetDelistedEvent.InputTuple,
    DigitalAssetDelistedEvent.OutputTuple,
    DigitalAssetDelistedEvent.OutputObject
  >;
  getEvent(
    key: "DigitalAssetListed"
  ): TypedContractEvent<
    DigitalAssetListedEvent.InputTuple,
    DigitalAssetListedEvent.OutputTuple,
    DigitalAssetListedEvent.OutputObject
  >;
  getEvent(
    key: "DigitalAssetOfferAccepted"
  ): TypedContractEvent<
    DigitalAssetOfferAcceptedEvent.InputTuple,
    DigitalAssetOfferAcceptedEvent.OutputTuple,
    DigitalAssetOfferAcceptedEvent.OutputObject
  >;
  getEvent(
    key: "DigitalAssetOfferMade"
  ): TypedContractEvent<
    DigitalAssetOfferMadeEvent.InputTuple,
    DigitalAssetOfferMadeEvent.OutputTuple,
    DigitalAssetOfferMadeEvent.OutputObject
  >;
  getEvent(
    key: "DigitalAssetSold"
  ): TypedContractEvent<
    DigitalAssetSoldEvent.InputTuple,
    DigitalAssetSoldEvent.OutputTuple,
    DigitalAssetSoldEvent.OutputObject
  >;
  getEvent(
    key: "DigitalAssetTraded"
  ): TypedContractEvent<
    DigitalAssetTradedEvent.InputTuple,
    DigitalAssetTradedEvent.OutputTuple,
    DigitalAssetTradedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "DigitalAssetDelisted(bytes32,address)": TypedContractEvent<
      DigitalAssetDelistedEvent.InputTuple,
      DigitalAssetDelistedEvent.OutputTuple,
      DigitalAssetDelistedEvent.OutputObject
    >;
    DigitalAssetDelisted: TypedContractEvent<
      DigitalAssetDelistedEvent.InputTuple,
      DigitalAssetDelistedEvent.OutputTuple,
      DigitalAssetDelistedEvent.OutputObject
    >;

    "DigitalAssetListed(bytes32,address,uint256,uint256)": TypedContractEvent<
      DigitalAssetListedEvent.InputTuple,
      DigitalAssetListedEvent.OutputTuple,
      DigitalAssetListedEvent.OutputObject
    >;
    DigitalAssetListed: TypedContractEvent<
      DigitalAssetListedEvent.InputTuple,
      DigitalAssetListedEvent.OutputTuple,
      DigitalAssetListedEvent.OutputObject
    >;

    "DigitalAssetOfferAccepted(bytes32,address,address,bytes32,uint256)": TypedContractEvent<
      DigitalAssetOfferAcceptedEvent.InputTuple,
      DigitalAssetOfferAcceptedEvent.OutputTuple,
      DigitalAssetOfferAcceptedEvent.OutputObject
    >;
    DigitalAssetOfferAccepted: TypedContractEvent<
      DigitalAssetOfferAcceptedEvent.InputTuple,
      DigitalAssetOfferAcceptedEvent.OutputTuple,
      DigitalAssetOfferAcceptedEvent.OutputObject
    >;

    "DigitalAssetOfferMade(bytes32,address,bytes32,uint256,uint256)": TypedContractEvent<
      DigitalAssetOfferMadeEvent.InputTuple,
      DigitalAssetOfferMadeEvent.OutputTuple,
      DigitalAssetOfferMadeEvent.OutputObject
    >;
    DigitalAssetOfferMade: TypedContractEvent<
      DigitalAssetOfferMadeEvent.InputTuple,
      DigitalAssetOfferMadeEvent.OutputTuple,
      DigitalAssetOfferMadeEvent.OutputObject
    >;

    "DigitalAssetSold(bytes32,address,address,uint256)": TypedContractEvent<
      DigitalAssetSoldEvent.InputTuple,
      DigitalAssetSoldEvent.OutputTuple,
      DigitalAssetSoldEvent.OutputObject
    >;
    DigitalAssetSold: TypedContractEvent<
      DigitalAssetSoldEvent.InputTuple,
      DigitalAssetSoldEvent.OutputTuple,
      DigitalAssetSoldEvent.OutputObject
    >;

    "DigitalAssetTraded(bytes32,address,address,uint256)": TypedContractEvent<
      DigitalAssetTradedEvent.InputTuple,
      DigitalAssetTradedEvent.OutputTuple,
      DigitalAssetTradedEvent.OutputObject
    >;
    DigitalAssetTraded: TypedContractEvent<
      DigitalAssetTradedEvent.InputTuple,
      DigitalAssetTradedEvent.OutputTuple,
      DigitalAssetTradedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
