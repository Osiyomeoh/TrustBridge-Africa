/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IVerificationRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getVerificationStatus"
      | "hasAttestorSigned"
      | "reviewVerification"
      | "revokeVerification"
      | "submitVerification"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getVerificationStatus",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAttestorSigned",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reviewVerification",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeVerification",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "submitVerification",
    values: [
      BytesLike,
      BytesLike,
      AddressLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike[],
      AddressLike[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getVerificationStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasAttestorSigned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviewVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitVerification",
    data: BytesLike
  ): Result;
}

export interface IVerificationRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): IVerificationRegistry;
  waitForDeployment(): Promise<this>;

  interface: IVerificationRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getVerificationStatus: TypedContractMethod<
    [assetId: BytesLike],
    [
      [boolean, bigint, bigint, bigint] & {
        verified: boolean;
        score: bigint;
        expiresAt: bigint;
        status: bigint;
      }
    ],
    "view"
  >;

  hasAttestorSigned: TypedContractMethod<
    [assetId: BytesLike, attestor: AddressLike],
    [boolean],
    "view"
  >;

  reviewVerification: TypedContractMethod<
    [assetId: BytesLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  revokeVerification: TypedContractMethod<
    [assetId: BytesLike, reason: string],
    [void],
    "nonpayable"
  >;

  submitVerification: TypedContractMethod<
    [
      assetId: BytesLike,
      assetType: BytesLike,
      owner: AddressLike,
      score: BigNumberish,
      evidenceRoot: BytesLike,
      expiresAt: BigNumberish,
      attestorSigs: BytesLike[],
      signingAttestors: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getVerificationStatus"
  ): TypedContractMethod<
    [assetId: BytesLike],
    [
      [boolean, bigint, bigint, bigint] & {
        verified: boolean;
        score: bigint;
        expiresAt: bigint;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasAttestorSigned"
  ): TypedContractMethod<
    [assetId: BytesLike, attestor: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "reviewVerification"
  ): TypedContractMethod<
    [assetId: BytesLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeVerification"
  ): TypedContractMethod<
    [assetId: BytesLike, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitVerification"
  ): TypedContractMethod<
    [
      assetId: BytesLike,
      assetType: BytesLike,
      owner: AddressLike,
      score: BigNumberish,
      evidenceRoot: BytesLike,
      expiresAt: BigNumberish,
      attestorSigs: BytesLike[],
      signingAttestors: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
