/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IPoolFactory {
  export type PoolStruct = {
    poolId: BytesLike;
    manager: AddressLike;
    name: string;
    strategy: string;
    assets: AddressLike[];
    totalValue: BigNumberish;
    dropTokenSupply: BigNumberish;
    tinTokenSupply: BigNumberish;
    dropTokenPrice: BigNumberish;
    tinTokenPrice: BigNumberish;
    targetAPY: BigNumberish;
    actualAPY: BigNumberish;
    riskLevel: BigNumberish;
    status: BigNumberish;
    minimumInvestment: BigNumberish;
    maximumInvestment: BigNumberish;
    lockupPeriod: BigNumberish;
    maturityDate: BigNumberish;
    dropTokenContract: AddressLike;
    tinTokenContract: AddressLike;
    poolContract: AddressLike;
    totalInvestors: BigNumberish;
    totalInvested: BigNumberish;
    createdAt: BigNumberish;
  };

  export type PoolStructOutput = [
    poolId: string,
    manager: string,
    name: string,
    strategy: string,
    assets: string[],
    totalValue: bigint,
    dropTokenSupply: bigint,
    tinTokenSupply: bigint,
    dropTokenPrice: bigint,
    tinTokenPrice: bigint,
    targetAPY: bigint,
    actualAPY: bigint,
    riskLevel: bigint,
    status: bigint,
    minimumInvestment: bigint,
    maximumInvestment: bigint,
    lockupPeriod: bigint,
    maturityDate: bigint,
    dropTokenContract: string,
    tinTokenContract: string,
    poolContract: string,
    totalInvestors: bigint,
    totalInvested: bigint,
    createdAt: bigint
  ] & {
    poolId: string;
    manager: string;
    name: string;
    strategy: string;
    assets: string[];
    totalValue: bigint;
    dropTokenSupply: bigint;
    tinTokenSupply: bigint;
    dropTokenPrice: bigint;
    tinTokenPrice: bigint;
    targetAPY: bigint;
    actualAPY: bigint;
    riskLevel: bigint;
    status: bigint;
    minimumInvestment: bigint;
    maximumInvestment: bigint;
    lockupPeriod: bigint;
    maturityDate: bigint;
    dropTokenContract: string;
    tinTokenContract: string;
    poolContract: string;
    totalInvestors: bigint;
    totalInvested: bigint;
    createdAt: bigint;
  };

  export type InvestorStruct = {
    investor: AddressLike;
    dropTokens: BigNumberish;
    tinTokens: BigNumberish;
    totalInvested: BigNumberish;
    entryDate: BigNumberish;
    lastUpdate: BigNumberish;
  };

  export type InvestorStructOutput = [
    investor: string,
    dropTokens: bigint,
    tinTokens: bigint,
    totalInvested: bigint,
    entryDate: bigint,
    lastUpdate: bigint
  ] & {
    investor: string;
    dropTokens: bigint;
    tinTokens: bigint;
    totalInvested: bigint;
    entryDate: bigint;
    lastUpdate: bigint;
  };

  export type PerformanceMetricsStruct = {
    totalReturn: BigNumberish;
    monthlyReturn: BigNumberish;
    volatility: BigNumberish;
    sharpeRatio: BigNumberish;
    maxDrawdown: BigNumberish;
  };

  export type PerformanceMetricsStructOutput = [
    totalReturn: bigint,
    monthlyReturn: bigint,
    volatility: bigint,
    sharpeRatio: bigint,
    maxDrawdown: bigint
  ] & {
    totalReturn: bigint;
    monthlyReturn: bigint;
    volatility: bigint;
    sharpeRatio: bigint;
    maxDrawdown: bigint;
  };
}

export interface IPoolFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addInvestor"
      | "createPool"
      | "distributeRewards"
      | "getPool"
      | "getPoolInvestors"
      | "getPoolPerformance"
      | "maturePool"
      | "removeInvestor"
      | "updatePoolStatus"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "InvestorAdded"
      | "PoolCreated"
      | "PoolMatured"
      | "PoolStatusUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addInvestor",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPool",
    values: [
      string,
      string,
      AddressLike[],
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeRewards",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getPool", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getPoolInvestors",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolPerformance",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maturePool",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeInvestor",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePoolStatus",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolInvestors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolPerformance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maturePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePoolStatus",
    data: BytesLike
  ): Result;
}

export namespace InvestorAddedEvent {
  export type InputTuple = [
    poolId: BytesLike,
    investor: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [poolId: string, investor: string, amount: bigint];
  export interface OutputObject {
    poolId: string;
    investor: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolCreatedEvent {
  export type InputTuple = [
    poolId: BytesLike,
    manager: AddressLike,
    name: string,
    totalValue: BigNumberish,
    dropTokenContract: AddressLike,
    tinTokenContract: AddressLike
  ];
  export type OutputTuple = [
    poolId: string,
    manager: string,
    name: string,
    totalValue: bigint,
    dropTokenContract: string,
    tinTokenContract: string
  ];
  export interface OutputObject {
    poolId: string;
    manager: string;
    name: string;
    totalValue: bigint;
    dropTokenContract: string;
    tinTokenContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolMaturedEvent {
  export type InputTuple = [poolId: BytesLike, finalValue: BigNumberish];
  export type OutputTuple = [poolId: string, finalValue: bigint];
  export interface OutputObject {
    poolId: string;
    finalValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolStatusUpdatedEvent {
  export type InputTuple = [
    poolId: BytesLike,
    oldStatus: BigNumberish,
    newStatus: BigNumberish
  ];
  export type OutputTuple = [
    poolId: string,
    oldStatus: bigint,
    newStatus: bigint
  ];
  export interface OutputObject {
    poolId: string;
    oldStatus: bigint;
    newStatus: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPoolFactory extends BaseContract {
  connect(runner?: ContractRunner | null): IPoolFactory;
  waitForDeployment(): Promise<this>;

  interface: IPoolFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addInvestor: TypedContractMethod<
    [poolId: BytesLike, investor: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  createPool: TypedContractMethod<
    [
      name: string,
      strategy: string,
      assets: AddressLike[],
      dropTokenSupply: BigNumberish,
      tinTokenSupply: BigNumberish,
      targetAPY: BigNumberish,
      riskLevel: BigNumberish,
      minimumInvestment: BigNumberish,
      maximumInvestment: BigNumberish,
      lockupPeriod: BigNumberish,
      maturityDate: BigNumberish
    ],
    [string],
    "payable"
  >;

  distributeRewards: TypedContractMethod<
    [poolId: BytesLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getPool: TypedContractMethod<
    [poolId: BytesLike],
    [IPoolFactory.PoolStructOutput],
    "view"
  >;

  getPoolInvestors: TypedContractMethod<
    [poolId: BytesLike],
    [IPoolFactory.InvestorStructOutput[]],
    "view"
  >;

  getPoolPerformance: TypedContractMethod<
    [poolId: BytesLike],
    [IPoolFactory.PerformanceMetricsStructOutput],
    "view"
  >;

  maturePool: TypedContractMethod<[poolId: BytesLike], [void], "nonpayable">;

  removeInvestor: TypedContractMethod<
    [poolId: BytesLike, investor: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePoolStatus: TypedContractMethod<
    [poolId: BytesLike, newStatus: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addInvestor"
  ): TypedContractMethod<
    [poolId: BytesLike, investor: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createPool"
  ): TypedContractMethod<
    [
      name: string,
      strategy: string,
      assets: AddressLike[],
      dropTokenSupply: BigNumberish,
      tinTokenSupply: BigNumberish,
      targetAPY: BigNumberish,
      riskLevel: BigNumberish,
      minimumInvestment: BigNumberish,
      maximumInvestment: BigNumberish,
      lockupPeriod: BigNumberish,
      maturityDate: BigNumberish
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "distributeRewards"
  ): TypedContractMethod<
    [poolId: BytesLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getPool"
  ): TypedContractMethod<
    [poolId: BytesLike],
    [IPoolFactory.PoolStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoolInvestors"
  ): TypedContractMethod<
    [poolId: BytesLike],
    [IPoolFactory.InvestorStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoolPerformance"
  ): TypedContractMethod<
    [poolId: BytesLike],
    [IPoolFactory.PerformanceMetricsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "maturePool"
  ): TypedContractMethod<[poolId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeInvestor"
  ): TypedContractMethod<
    [poolId: BytesLike, investor: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePoolStatus"
  ): TypedContractMethod<
    [poolId: BytesLike, newStatus: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "InvestorAdded"
  ): TypedContractEvent<
    InvestorAddedEvent.InputTuple,
    InvestorAddedEvent.OutputTuple,
    InvestorAddedEvent.OutputObject
  >;
  getEvent(
    key: "PoolCreated"
  ): TypedContractEvent<
    PoolCreatedEvent.InputTuple,
    PoolCreatedEvent.OutputTuple,
    PoolCreatedEvent.OutputObject
  >;
  getEvent(
    key: "PoolMatured"
  ): TypedContractEvent<
    PoolMaturedEvent.InputTuple,
    PoolMaturedEvent.OutputTuple,
    PoolMaturedEvent.OutputObject
  >;
  getEvent(
    key: "PoolStatusUpdated"
  ): TypedContractEvent<
    PoolStatusUpdatedEvent.InputTuple,
    PoolStatusUpdatedEvent.OutputTuple,
    PoolStatusUpdatedEvent.OutputObject
  >;

  filters: {
    "InvestorAdded(bytes32,address,uint256)": TypedContractEvent<
      InvestorAddedEvent.InputTuple,
      InvestorAddedEvent.OutputTuple,
      InvestorAddedEvent.OutputObject
    >;
    InvestorAdded: TypedContractEvent<
      InvestorAddedEvent.InputTuple,
      InvestorAddedEvent.OutputTuple,
      InvestorAddedEvent.OutputObject
    >;

    "PoolCreated(bytes32,address,string,uint256,address,address)": TypedContractEvent<
      PoolCreatedEvent.InputTuple,
      PoolCreatedEvent.OutputTuple,
      PoolCreatedEvent.OutputObject
    >;
    PoolCreated: TypedContractEvent<
      PoolCreatedEvent.InputTuple,
      PoolCreatedEvent.OutputTuple,
      PoolCreatedEvent.OutputObject
    >;

    "PoolMatured(bytes32,uint256)": TypedContractEvent<
      PoolMaturedEvent.InputTuple,
      PoolMaturedEvent.OutputTuple,
      PoolMaturedEvent.OutputObject
    >;
    PoolMatured: TypedContractEvent<
      PoolMaturedEvent.InputTuple,
      PoolMaturedEvent.OutputTuple,
      PoolMaturedEvent.OutputObject
    >;

    "PoolStatusUpdated(bytes32,uint8,uint8)": TypedContractEvent<
      PoolStatusUpdatedEvent.InputTuple,
      PoolStatusUpdatedEvent.OutputTuple,
      PoolStatusUpdatedEvent.OutputObject
    >;
    PoolStatusUpdated: TypedContractEvent<
      PoolStatusUpdatedEvent.InputTuple,
      PoolStatusUpdatedEvent.OutputTuple,
      PoolStatusUpdatedEvent.OutputObject
    >;
  };
}
