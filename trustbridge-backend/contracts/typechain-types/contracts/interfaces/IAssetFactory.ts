/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IAssetFactory {
  export type AssetStruct = {
    id: BytesLike;
    owner: AddressLike;
    assetType: string;
    name: string;
    location: string;
    totalValue: BigNumberish;
    tokenSupply: BigNumberish;
    tokenizedAmount: BigNumberish;
    maturityDate: BigNumberish;
    verificationScore: BigNumberish;
    isActive: boolean;
    createdAt: BigNumberish;
    tokenContract: AddressLike;
  };

  export type AssetStructOutput = [
    id: string,
    owner: string,
    assetType: string,
    name: string,
    location: string,
    totalValue: bigint,
    tokenSupply: bigint,
    tokenizedAmount: bigint,
    maturityDate: bigint,
    verificationScore: bigint,
    isActive: boolean,
    createdAt: bigint,
    tokenContract: string
  ] & {
    id: string;
    owner: string;
    assetType: string;
    name: string;
    location: string;
    totalValue: bigint;
    tokenSupply: bigint;
    tokenizedAmount: bigint;
    maturityDate: bigint;
    verificationScore: bigint;
    isActive: boolean;
    createdAt: bigint;
    tokenContract: string;
  };
}

export interface IAssetFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAsset"
      | "getUserAssets"
      | "setVerificationRegistry"
      | "tokenizeAsset"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "getAsset", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getUserAssets",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerificationRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenizeAsset",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(functionFragment: "getAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerificationRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenizeAsset",
    data: BytesLike
  ): Result;
}

export interface IAssetFactory extends BaseContract {
  connect(runner?: ContractRunner | null): IAssetFactory;
  waitForDeployment(): Promise<this>;

  interface: IAssetFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAsset: TypedContractMethod<
    [assetId: BytesLike],
    [IAssetFactory.AssetStructOutput],
    "view"
  >;

  getUserAssets: TypedContractMethod<[user: AddressLike], [string[]], "view">;

  setVerificationRegistry: TypedContractMethod<
    [_verificationRegistry: AddressLike],
    [void],
    "nonpayable"
  >;

  tokenizeAsset: TypedContractMethod<
    [
      assetType: string,
      name: string,
      location: string,
      totalValue: BigNumberish,
      tokenSupply: BigNumberish,
      maturityDate: BigNumberish,
      verificationAssetId: BytesLike
    ],
    [string],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAsset"
  ): TypedContractMethod<
    [assetId: BytesLike],
    [IAssetFactory.AssetStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserAssets"
  ): TypedContractMethod<[user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "setVerificationRegistry"
  ): TypedContractMethod<
    [_verificationRegistry: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tokenizeAsset"
  ): TypedContractMethod<
    [
      assetType: string,
      name: string,
      location: string,
      totalValue: BigNumberish,
      tokenSupply: BigNumberish,
      maturityDate: BigNumberish,
      verificationAssetId: BytesLike
    ],
    [string],
    "payable"
  >;

  filters: {};
}
