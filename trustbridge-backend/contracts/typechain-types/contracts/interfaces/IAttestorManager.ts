/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IAttestorManager {
  export type AttestorInfoStruct = {
    isActive: boolean;
    stakeAmount: BigNumberish;
    reputationScore: BigNumberish;
    organizationType: string;
    country: string;
    totalAttestations: BigNumberish;
    correctAttestations: BigNumberish;
  };

  export type AttestorInfoStructOutput = [
    isActive: boolean,
    stakeAmount: bigint,
    reputationScore: bigint,
    organizationType: string,
    country: string,
    totalAttestations: bigint,
    correctAttestations: bigint
  ] & {
    isActive: boolean;
    stakeAmount: bigint;
    reputationScore: bigint;
    organizationType: string;
    country: string;
    totalAttestations: bigint;
    correctAttestations: bigint;
  };
}

export interface IAttestorManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAttestorInfo"
      | "incrementAttestationCount"
      | "isAttestorActive"
      | "registerAttestor"
      | "slashAttestor"
      | "updateAttestorReputation"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAttestorInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "incrementAttestationCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAttestorActive",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAttestor",
    values: [AddressLike, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slashAttestor",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAttestorReputation",
    values: [AddressLike, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAttestorInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrementAttestationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAttestorActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAttestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashAttestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAttestorReputation",
    data: BytesLike
  ): Result;
}

export interface IAttestorManager extends BaseContract {
  connect(runner?: ContractRunner | null): IAttestorManager;
  waitForDeployment(): Promise<this>;

  interface: IAttestorManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAttestorInfo: TypedContractMethod<
    [attestor: AddressLike],
    [IAttestorManager.AttestorInfoStructOutput],
    "view"
  >;

  incrementAttestationCount: TypedContractMethod<
    [attestor: AddressLike],
    [void],
    "nonpayable"
  >;

  isAttestorActive: TypedContractMethod<
    [attestor: AddressLike],
    [boolean],
    "view"
  >;

  registerAttestor: TypedContractMethod<
    [
      attestor: AddressLike,
      organizationType: string,
      country: string,
      initialStake: BigNumberish
    ],
    [void],
    "payable"
  >;

  slashAttestor: TypedContractMethod<
    [attestor: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;

  updateAttestorReputation: TypedContractMethod<
    [attestor: AddressLike, wasCorrect: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAttestorInfo"
  ): TypedContractMethod<
    [attestor: AddressLike],
    [IAttestorManager.AttestorInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "incrementAttestationCount"
  ): TypedContractMethod<[attestor: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isAttestorActive"
  ): TypedContractMethod<[attestor: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerAttestor"
  ): TypedContractMethod<
    [
      attestor: AddressLike,
      organizationType: string,
      country: string,
      initialStake: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "slashAttestor"
  ): TypedContractMethod<
    [attestor: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateAttestorReputation"
  ): TypedContractMethod<
    [attestor: AddressLike, wasCorrect: boolean],
    [void],
    "nonpayable"
  >;

  filters: {};
}
