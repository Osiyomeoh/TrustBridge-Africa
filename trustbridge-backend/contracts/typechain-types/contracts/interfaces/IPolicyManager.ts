/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IPolicyManager {
  export type AssetTypePolicyStruct = {
    minScore: BigNumberish;
    ttlSeconds: BigNumberish;
    requiredAttestors: BigNumberish;
    requiresManualReview: boolean;
  };

  export type AssetTypePolicyStructOutput = [
    minScore: bigint,
    ttlSeconds: bigint,
    requiredAttestors: bigint,
    requiresManualReview: boolean
  ] & {
    minScore: bigint;
    ttlSeconds: bigint;
    requiredAttestors: bigint;
    requiresManualReview: boolean;
  };
}

export interface IPolicyManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAssetTypePolicy"
      | "isAssetTypeSupported"
      | "setAssetTypePolicy"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAssetTypePolicy",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAssetTypeSupported",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetTypePolicy",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAssetTypePolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAssetTypeSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAssetTypePolicy",
    data: BytesLike
  ): Result;
}

export interface IPolicyManager extends BaseContract {
  connect(runner?: ContractRunner | null): IPolicyManager;
  waitForDeployment(): Promise<this>;

  interface: IPolicyManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAssetTypePolicy: TypedContractMethod<
    [assetType: BytesLike],
    [IPolicyManager.AssetTypePolicyStructOutput],
    "view"
  >;

  isAssetTypeSupported: TypedContractMethod<
    [assetType: BytesLike],
    [boolean],
    "view"
  >;

  setAssetTypePolicy: TypedContractMethod<
    [
      assetType: BytesLike,
      minScore: BigNumberish,
      ttlSeconds: BigNumberish,
      requiredAttestors: BigNumberish,
      requiresManualReview: boolean
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAssetTypePolicy"
  ): TypedContractMethod<
    [assetType: BytesLike],
    [IPolicyManager.AssetTypePolicyStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAssetTypeSupported"
  ): TypedContractMethod<[assetType: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "setAssetTypePolicy"
  ): TypedContractMethod<
    [
      assetType: BytesLike,
      minScore: BigNumberish,
      ttlSeconds: BigNumberish,
      requiredAttestors: BigNumberish,
      requiresManualReview: boolean
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
