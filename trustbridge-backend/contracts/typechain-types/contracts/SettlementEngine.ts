/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface SettlementEngineInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CONFIRMATION_THRESHOLD"
      | "DEFAULT_ADMIN_ROLE"
      | "confirmDelivery"
      | "confirmationCount"
      | "createSettlement"
      | "deliveryConfirmations"
      | "feeRecipient"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "paused"
      | "raiseDispute"
      | "renounceRole"
      | "revokeRole"
      | "settlementFee"
      | "settlements"
      | "supportsInterface"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DeliveryConfirmed"
      | "DisputeRaised"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SettlementCompleted"
      | "SettlementCreated"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CONFIRMATION_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "confirmDelivery",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmationCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createSettlement",
    values: [BytesLike, AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deliveryConfirmations",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "raiseDispute",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "settlementFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "settlements",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "CONFIRMATION_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmDelivery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deliveryConfirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "raiseDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settlementFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settlements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export namespace DeliveryConfirmedEvent {
  export type InputTuple = [settlementId: BytesLike, confirmer: AddressLike];
  export type OutputTuple = [settlementId: string, confirmer: string];
  export interface OutputObject {
    settlementId: string;
    confirmer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisputeRaisedEvent {
  export type InputTuple = [settlementId: BytesLike, disputer: AddressLike];
  export type OutputTuple = [settlementId: string, disputer: string];
  export interface OutputObject {
    settlementId: string;
    disputer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettlementCompletedEvent {
  export type InputTuple = [settlementId: BytesLike, amount: BigNumberish];
  export type OutputTuple = [settlementId: string, amount: bigint];
  export interface OutputObject {
    settlementId: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettlementCreatedEvent {
  export type InputTuple = [
    settlementId: BytesLike,
    assetId: BytesLike,
    buyer: AddressLike,
    seller: AddressLike
  ];
  export type OutputTuple = [
    settlementId: string,
    assetId: string,
    buyer: string,
    seller: string
  ];
  export interface OutputObject {
    settlementId: string;
    assetId: string;
    buyer: string;
    seller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SettlementEngine extends BaseContract {
  connect(runner?: ContractRunner | null): SettlementEngine;
  waitForDeployment(): Promise<this>;

  interface: SettlementEngineInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CONFIRMATION_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  confirmDelivery: TypedContractMethod<
    [settlementId: BytesLike, proofHash: string],
    [void],
    "nonpayable"
  >;

  confirmationCount: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  createSettlement: TypedContractMethod<
    [
      assetId: BytesLike,
      seller: AddressLike,
      deliveryDeadline: BigNumberish,
      trackingHash: string
    ],
    [string],
    "payable"
  >;

  deliveryConfirmations: TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [
      [string, bigint, string, boolean] & {
        confirmer: string;
        timestamp: bigint;
        proofHash: string;
        isValid: boolean;
      }
    ],
    "view"
  >;

  feeRecipient: TypedContractMethod<[], [string], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  paused: TypedContractMethod<[], [boolean], "view">;

  raiseDispute: TypedContractMethod<
    [settlementId: BytesLike],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  settlementFee: TypedContractMethod<[], [bigint], "view">;

  settlements: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string
      ] & {
        id: string;
        assetId: string;
        buyer: string;
        seller: string;
        amount: bigint;
        escrowBalance: bigint;
        status: bigint;
        createdAt: bigint;
        deliveryDeadline: bigint;
        trackingHash: string;
      }
    ],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CONFIRMATION_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "confirmDelivery"
  ): TypedContractMethod<
    [settlementId: BytesLike, proofHash: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "confirmationCount"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "createSettlement"
  ): TypedContractMethod<
    [
      assetId: BytesLike,
      seller: AddressLike,
      deliveryDeadline: BigNumberish,
      trackingHash: string
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "deliveryConfirmations"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [
      [string, bigint, string, boolean] & {
        confirmer: string;
        timestamp: bigint;
        proofHash: string;
        isValid: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "feeRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "raiseDispute"
  ): TypedContractMethod<[settlementId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "settlementFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "settlements"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string
      ] & {
        id: string;
        assetId: string;
        buyer: string;
        seller: string;
        amount: bigint;
        escrowBalance: bigint;
        status: bigint;
        createdAt: bigint;
        deliveryDeadline: bigint;
        trackingHash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;

  getEvent(
    key: "DeliveryConfirmed"
  ): TypedContractEvent<
    DeliveryConfirmedEvent.InputTuple,
    DeliveryConfirmedEvent.OutputTuple,
    DeliveryConfirmedEvent.OutputObject
  >;
  getEvent(
    key: "DisputeRaised"
  ): TypedContractEvent<
    DisputeRaisedEvent.InputTuple,
    DisputeRaisedEvent.OutputTuple,
    DisputeRaisedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SettlementCompleted"
  ): TypedContractEvent<
    SettlementCompletedEvent.InputTuple,
    SettlementCompletedEvent.OutputTuple,
    SettlementCompletedEvent.OutputObject
  >;
  getEvent(
    key: "SettlementCreated"
  ): TypedContractEvent<
    SettlementCreatedEvent.InputTuple,
    SettlementCreatedEvent.OutputTuple,
    SettlementCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "DeliveryConfirmed(bytes32,address)": TypedContractEvent<
      DeliveryConfirmedEvent.InputTuple,
      DeliveryConfirmedEvent.OutputTuple,
      DeliveryConfirmedEvent.OutputObject
    >;
    DeliveryConfirmed: TypedContractEvent<
      DeliveryConfirmedEvent.InputTuple,
      DeliveryConfirmedEvent.OutputTuple,
      DeliveryConfirmedEvent.OutputObject
    >;

    "DisputeRaised(bytes32,address)": TypedContractEvent<
      DisputeRaisedEvent.InputTuple,
      DisputeRaisedEvent.OutputTuple,
      DisputeRaisedEvent.OutputObject
    >;
    DisputeRaised: TypedContractEvent<
      DisputeRaisedEvent.InputTuple,
      DisputeRaisedEvent.OutputTuple,
      DisputeRaisedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SettlementCompleted(bytes32,uint256)": TypedContractEvent<
      SettlementCompletedEvent.InputTuple,
      SettlementCompletedEvent.OutputTuple,
      SettlementCompletedEvent.OutputObject
    >;
    SettlementCompleted: TypedContractEvent<
      SettlementCompletedEvent.InputTuple,
      SettlementCompletedEvent.OutputTuple,
      SettlementCompletedEvent.OutputObject
    >;

    "SettlementCreated(bytes32,bytes32,address,address)": TypedContractEvent<
      SettlementCreatedEvent.InputTuple,
      SettlementCreatedEvent.OutputTuple,
      SettlementCreatedEvent.OutputObject
    >;
    SettlementCreated: TypedContractEvent<
      SettlementCreatedEvent.InputTuple,
      SettlementCreatedEvent.OutputTuple,
      SettlementCreatedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
