/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace CoreAssetFactory {
  export type UniversalAssetStruct = {
    id: BytesLike;
    originalOwner: AddressLike;
    currentOwner: AddressLike;
    category: BigNumberish;
    assetType: BigNumberish;
    assetTypeString: string;
    name: string;
    location: string;
    totalValue: BigNumberish;
    maturityDate: BigNumberish;
    verificationLevel: BigNumberish;
    evidenceHashes: string[];
    documentTypes: string[];
    imageURI: string;
    documentURI: string;
    description: string;
    nftContract: AddressLike;
    tokenId: BigNumberish;
    status: BigNumberish;
    currentAMC: AddressLike;
    createdAt: BigNumberish;
    verifiedAt: BigNumberish;
    amcTransferredAt: BigNumberish;
    tradingVolume: BigNumberish;
    lastSalePrice: BigNumberish;
    isTradeable: boolean;
    isListed: boolean;
    listingPrice: BigNumberish;
    listingExpiry: BigNumberish;
    currentBuyer: AddressLike;
    currentOffer: BigNumberish;
  };

  export type UniversalAssetStructOutput = [
    id: string,
    originalOwner: string,
    currentOwner: string,
    category: bigint,
    assetType: bigint,
    assetTypeString: string,
    name: string,
    location: string,
    totalValue: bigint,
    maturityDate: bigint,
    verificationLevel: bigint,
    evidenceHashes: string[],
    documentTypes: string[],
    imageURI: string,
    documentURI: string,
    description: string,
    nftContract: string,
    tokenId: bigint,
    status: bigint,
    currentAMC: string,
    createdAt: bigint,
    verifiedAt: bigint,
    amcTransferredAt: bigint,
    tradingVolume: bigint,
    lastSalePrice: bigint,
    isTradeable: boolean,
    isListed: boolean,
    listingPrice: bigint,
    listingExpiry: bigint,
    currentBuyer: string,
    currentOffer: bigint
  ] & {
    id: string;
    originalOwner: string;
    currentOwner: string;
    category: bigint;
    assetType: bigint;
    assetTypeString: string;
    name: string;
    location: string;
    totalValue: bigint;
    maturityDate: bigint;
    verificationLevel: bigint;
    evidenceHashes: string[];
    documentTypes: string[];
    imageURI: string;
    documentURI: string;
    description: string;
    nftContract: string;
    tokenId: bigint;
    status: bigint;
    currentAMC: string;
    createdAt: bigint;
    verifiedAt: bigint;
    amcTransferredAt: bigint;
    tradingVolume: bigint;
    lastSalePrice: bigint;
    isTradeable: boolean;
    isListed: boolean;
    listingPrice: bigint;
    listingExpiry: bigint;
    currentBuyer: string;
    currentOffer: bigint;
  };
}

export interface CoreAssetFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "AMC_ROLE"
      | "AMC_TRANSFER_FEE"
      | "DEFAULT_ADMIN_ROLE"
      | "DIGITAL_CREATION_FEE"
      | "MINTER_ROLE"
      | "MIN_CREATION_FEE"
      | "VERIFIER_ROLE"
      | "amcManagedAssets"
      | "assetFlowProgress"
      | "assetFlowStage"
      | "assetFlowStatusText"
      | "assetNFT"
      | "assets"
      | "createDigitalAsset"
      | "createRWAAsset"
      | "feeRecipient"
      | "getAMCManagedAssets"
      | "getAsset"
      | "getAssetFlowStatus"
      | "getRoleAdmin"
      | "getUserAssets"
      | "grantRole"
      | "hasRole"
      | "isAssetReadyForTrading"
      | "pause"
      | "paused"
      | "renounceRole"
      | "revokeRole"
      | "sendTrustTokensForFee"
      | "supportsInterface"
      | "totalAssets"
      | "trustToken"
      | "unpause"
      | "userAssets"
      | "verifyAsset"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AssetCreated"
      | "AssetFlowProgressUpdated"
      | "AssetVerified"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(functionFragment: "AMC_ROLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "AMC_TRANSFER_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DIGITAL_CREATION_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_CREATION_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VERIFIER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "amcManagedAssets",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assetFlowProgress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assetFlowStage",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assetFlowStatusText",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "assetNFT", values?: undefined): string;
  encodeFunctionData(functionFragment: "assets", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "createDigitalAsset",
    values: [BigNumberish, string, string, string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createRWAAsset",
    values: [
      BigNumberish,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      string[],
      string[],
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAMCManagedAssets",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "getAsset", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getAssetFlowStatus",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAssets",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAssetReadyForTrading",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sendTrustTokensForFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "trustToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userAssets",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyAsset",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "AMC_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "AMC_TRANSFER_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DIGITAL_CREATION_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_CREATION_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VERIFIER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amcManagedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetFlowProgress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetFlowStage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetFlowStatusText",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assetNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createDigitalAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRWAAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAMCManagedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAssetFlowStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAssetReadyForTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendTrustTokensForFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trustToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userAssets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyAsset",
    data: BytesLike
  ): Result;
}

export namespace AssetCreatedEvent {
  export type InputTuple = [
    assetId: BytesLike,
    owner: AddressLike,
    category: BigNumberish,
    assetType: string,
    name: string,
    totalValue: BigNumberish,
    status: BigNumberish
  ];
  export type OutputTuple = [
    assetId: string,
    owner: string,
    category: bigint,
    assetType: string,
    name: string,
    totalValue: bigint,
    status: bigint
  ];
  export interface OutputObject {
    assetId: string;
    owner: string;
    category: bigint;
    assetType: string;
    name: string;
    totalValue: bigint;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetFlowProgressUpdatedEvent {
  export type InputTuple = [
    assetId: BytesLike,
    stage: BigNumberish,
    progress: BigNumberish,
    statusText: string
  ];
  export type OutputTuple = [
    assetId: string,
    stage: bigint,
    progress: bigint,
    statusText: string
  ];
  export interface OutputObject {
    assetId: string;
    stage: bigint;
    progress: bigint;
    statusText: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetVerifiedEvent {
  export type InputTuple = [
    assetId: BytesLike,
    level: BigNumberish,
    status: BigNumberish
  ];
  export type OutputTuple = [assetId: string, level: bigint, status: bigint];
  export interface OutputObject {
    assetId: string;
    level: bigint;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CoreAssetFactory extends BaseContract {
  connect(runner?: ContractRunner | null): CoreAssetFactory;
  waitForDeployment(): Promise<this>;

  interface: CoreAssetFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  AMC_ROLE: TypedContractMethod<[], [string], "view">;

  AMC_TRANSFER_FEE: TypedContractMethod<[], [bigint], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DIGITAL_CREATION_FEE: TypedContractMethod<[], [bigint], "view">;

  MINTER_ROLE: TypedContractMethod<[], [string], "view">;

  MIN_CREATION_FEE: TypedContractMethod<[], [bigint], "view">;

  VERIFIER_ROLE: TypedContractMethod<[], [string], "view">;

  amcManagedAssets: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  assetFlowProgress: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  assetFlowStage: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  assetFlowStatusText: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  assetNFT: TypedContractMethod<[], [string], "view">;

  assets: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint,
        bigint,
        string,
        bigint
      ] & {
        id: string;
        originalOwner: string;
        currentOwner: string;
        category: bigint;
        assetType: bigint;
        assetTypeString: string;
        name: string;
        location: string;
        totalValue: bigint;
        maturityDate: bigint;
        verificationLevel: bigint;
        imageURI: string;
        documentURI: string;
        description: string;
        nftContract: string;
        tokenId: bigint;
        status: bigint;
        currentAMC: string;
        createdAt: bigint;
        verifiedAt: bigint;
        amcTransferredAt: bigint;
        tradingVolume: bigint;
        lastSalePrice: bigint;
        isTradeable: boolean;
        isListed: boolean;
        listingPrice: bigint;
        listingExpiry: bigint;
        currentBuyer: string;
        currentOffer: bigint;
      }
    ],
    "view"
  >;

  createDigitalAsset: TypedContractMethod<
    [
      _category: BigNumberish,
      _assetTypeString: string,
      _name: string,
      _location: string,
      _totalValue: BigNumberish,
      _imageURI: string,
      _description: string
    ],
    [string],
    "nonpayable"
  >;

  createRWAAsset: TypedContractMethod<
    [
      _category: BigNumberish,
      _assetTypeString: string,
      _name: string,
      _location: string,
      _totalValue: BigNumberish,
      _maturityDate: BigNumberish,
      _evidenceHashes: string[],
      _documentTypes: string[],
      _imageURI: string,
      _documentURI: string,
      _description: string
    ],
    [string],
    "nonpayable"
  >;

  feeRecipient: TypedContractMethod<[], [string], "view">;

  getAMCManagedAssets: TypedContractMethod<
    [_amc: AddressLike],
    [string[]],
    "view"
  >;

  getAsset: TypedContractMethod<
    [_assetId: BytesLike],
    [CoreAssetFactory.UniversalAssetStructOutput],
    "view"
  >;

  getAssetFlowStatus: TypedContractMethod<
    [_assetId: BytesLike],
    [
      [bigint, bigint, string] & {
        stage: bigint;
        progress: bigint;
        statusText: string;
      }
    ],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getUserAssets: TypedContractMethod<[_user: AddressLike], [string[]], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isAssetReadyForTrading: TypedContractMethod<
    [_assetId: BytesLike],
    [boolean],
    "view"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  sendTrustTokensForFee: TypedContractMethod<[], [void], "nonpayable">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  totalAssets: TypedContractMethod<[], [bigint], "view">;

  trustToken: TypedContractMethod<[], [string], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  userAssets: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  verifyAsset: TypedContractMethod<
    [_assetId: BytesLike, _level: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "AMC_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "AMC_TRANSFER_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DIGITAL_CREATION_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MINTER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MIN_CREATION_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VERIFIER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "amcManagedAssets"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "assetFlowProgress"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "assetFlowStage"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "assetFlowStatusText"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "assetNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "assets"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint,
        bigint,
        string,
        bigint
      ] & {
        id: string;
        originalOwner: string;
        currentOwner: string;
        category: bigint;
        assetType: bigint;
        assetTypeString: string;
        name: string;
        location: string;
        totalValue: bigint;
        maturityDate: bigint;
        verificationLevel: bigint;
        imageURI: string;
        documentURI: string;
        description: string;
        nftContract: string;
        tokenId: bigint;
        status: bigint;
        currentAMC: string;
        createdAt: bigint;
        verifiedAt: bigint;
        amcTransferredAt: bigint;
        tradingVolume: bigint;
        lastSalePrice: bigint;
        isTradeable: boolean;
        isListed: boolean;
        listingPrice: bigint;
        listingExpiry: bigint;
        currentBuyer: string;
        currentOffer: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createDigitalAsset"
  ): TypedContractMethod<
    [
      _category: BigNumberish,
      _assetTypeString: string,
      _name: string,
      _location: string,
      _totalValue: BigNumberish,
      _imageURI: string,
      _description: string
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createRWAAsset"
  ): TypedContractMethod<
    [
      _category: BigNumberish,
      _assetTypeString: string,
      _name: string,
      _location: string,
      _totalValue: BigNumberish,
      _maturityDate: BigNumberish,
      _evidenceHashes: string[],
      _documentTypes: string[],
      _imageURI: string,
      _documentURI: string,
      _description: string
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "feeRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAMCManagedAssets"
  ): TypedContractMethod<[_amc: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAsset"
  ): TypedContractMethod<
    [_assetId: BytesLike],
    [CoreAssetFactory.UniversalAssetStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAssetFlowStatus"
  ): TypedContractMethod<
    [_assetId: BytesLike],
    [
      [bigint, bigint, string] & {
        stage: bigint;
        progress: bigint;
        statusText: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getUserAssets"
  ): TypedContractMethod<[_user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAssetReadyForTrading"
  ): TypedContractMethod<[_assetId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendTrustTokensForFee"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalAssets"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "trustToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userAssets"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyAsset"
  ): TypedContractMethod<
    [_assetId: BytesLike, _level: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AssetCreated"
  ): TypedContractEvent<
    AssetCreatedEvent.InputTuple,
    AssetCreatedEvent.OutputTuple,
    AssetCreatedEvent.OutputObject
  >;
  getEvent(
    key: "AssetFlowProgressUpdated"
  ): TypedContractEvent<
    AssetFlowProgressUpdatedEvent.InputTuple,
    AssetFlowProgressUpdatedEvent.OutputTuple,
    AssetFlowProgressUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "AssetVerified"
  ): TypedContractEvent<
    AssetVerifiedEvent.InputTuple,
    AssetVerifiedEvent.OutputTuple,
    AssetVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "AssetCreated(bytes32,address,uint8,string,string,uint256,uint8)": TypedContractEvent<
      AssetCreatedEvent.InputTuple,
      AssetCreatedEvent.OutputTuple,
      AssetCreatedEvent.OutputObject
    >;
    AssetCreated: TypedContractEvent<
      AssetCreatedEvent.InputTuple,
      AssetCreatedEvent.OutputTuple,
      AssetCreatedEvent.OutputObject
    >;

    "AssetFlowProgressUpdated(bytes32,uint8,uint8,string)": TypedContractEvent<
      AssetFlowProgressUpdatedEvent.InputTuple,
      AssetFlowProgressUpdatedEvent.OutputTuple,
      AssetFlowProgressUpdatedEvent.OutputObject
    >;
    AssetFlowProgressUpdated: TypedContractEvent<
      AssetFlowProgressUpdatedEvent.InputTuple,
      AssetFlowProgressUpdatedEvent.OutputTuple,
      AssetFlowProgressUpdatedEvent.OutputObject
    >;

    "AssetVerified(bytes32,uint8,uint8)": TypedContractEvent<
      AssetVerifiedEvent.InputTuple,
      AssetVerifiedEvent.OutputTuple,
      AssetVerifiedEvent.OutputObject
    >;
    AssetVerified: TypedContractEvent<
      AssetVerifiedEvent.InputTuple,
      AssetVerifiedEvent.OutputTuple,
      AssetVerifiedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
