/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TrustTokenBurnerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BURNER_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "OPERATOR_ROLE"
      | "burnForNftCreation"
      | "calculateNftCreationFee"
      | "feeTiers"
      | "getBurnStats"
      | "getFeeTier"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "pause"
      | "paused"
      | "renounceRole"
      | "revokeRole"
      | "setTreasuryWallet"
      | "setTrustTokenContract"
      | "supportsInterface"
      | "totalBurnTransactions"
      | "totalTokensBurned"
      | "treasuryWallet"
      | "trustTokenContract"
      | "unpause"
      | "updateFeeTier"
      | "userBurns"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FeeTierUpdated"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "TokensBurned"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BURNER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "burnForNftCreation",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateNftCreationFee",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "feeTiers", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getBurnStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "getFeeTier", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustTokenContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBurnTransactions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalTokensBurned",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "trustTokenContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateFeeTier",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userBurns",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "BURNER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnForNftCreation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateNftCreationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeTiers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBurnStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFeeTier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrustTokenContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBurnTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTokensBurned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustTokenContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userBurns", data: BytesLike): Result;
}

export namespace FeeTierUpdatedEvent {
  export type InputTuple = [
    tier: string,
    baseFee: BigNumberish,
    verificationMultiplier: BigNumberish,
    rarityMultiplier: BigNumberish
  ];
  export type OutputTuple = [
    tier: string,
    baseFee: bigint,
    verificationMultiplier: bigint,
    rarityMultiplier: bigint
  ];
  export interface OutputObject {
    tier: string;
    baseFee: bigint;
    verificationMultiplier: bigint;
    rarityMultiplier: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensBurnedEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    reason: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    amount: bigint,
    reason: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    amount: bigint;
    reason: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TrustTokenBurner extends BaseContract {
  connect(runner?: ContractRunner | null): TrustTokenBurner;
  waitForDeployment(): Promise<this>;

  interface: TrustTokenBurnerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BURNER_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  OPERATOR_ROLE: TypedContractMethod<[], [string], "view">;

  burnForNftCreation: TypedContractMethod<
    [amount: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;

  calculateNftCreationFee: TypedContractMethod<
    [verificationLevel: string, rarity: string],
    [bigint],
    "view"
  >;

  feeTiers: TypedContractMethod<
    [arg0: string],
    [
      [bigint, bigint, bigint] & {
        baseFee: bigint;
        verificationMultiplier: bigint;
        rarityMultiplier: bigint;
      }
    ],
    "view"
  >;

  getBurnStats: TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        _totalTokensBurned: bigint;
        _totalBurnTransactions: bigint;
        _userBurns: bigint;
      }
    ],
    "view"
  >;

  getFeeTier: TypedContractMethod<
    [tier: string],
    [
      [bigint, bigint, bigint] & {
        baseFee: bigint;
        verificationMultiplier: bigint;
        rarityMultiplier: bigint;
      }
    ],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setTreasuryWallet: TypedContractMethod<
    [_newTreasury: AddressLike],
    [void],
    "nonpayable"
  >;

  setTrustTokenContract: TypedContractMethod<
    [_newContract: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  totalBurnTransactions: TypedContractMethod<[], [bigint], "view">;

  totalTokensBurned: TypedContractMethod<[], [bigint], "view">;

  treasuryWallet: TypedContractMethod<[], [string], "view">;

  trustTokenContract: TypedContractMethod<[], [string], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateFeeTier: TypedContractMethod<
    [
      tier: string,
      baseFee: BigNumberish,
      verificationMultiplier: BigNumberish,
      rarityMultiplier: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  userBurns: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BURNER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OPERATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "burnForNftCreation"
  ): TypedContractMethod<
    [amount: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calculateNftCreationFee"
  ): TypedContractMethod<
    [verificationLevel: string, rarity: string],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "feeTiers"
  ): TypedContractMethod<
    [arg0: string],
    [
      [bigint, bigint, bigint] & {
        baseFee: bigint;
        verificationMultiplier: bigint;
        rarityMultiplier: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBurnStats"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        _totalTokensBurned: bigint;
        _totalBurnTransactions: bigint;
        _userBurns: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFeeTier"
  ): TypedContractMethod<
    [tier: string],
    [
      [bigint, bigint, bigint] & {
        baseFee: bigint;
        verificationMultiplier: bigint;
        rarityMultiplier: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTreasuryWallet"
  ): TypedContractMethod<[_newTreasury: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTrustTokenContract"
  ): TypedContractMethod<[_newContract: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalBurnTransactions"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalTokensBurned"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "treasuryWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "trustTokenContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateFeeTier"
  ): TypedContractMethod<
    [
      tier: string,
      baseFee: BigNumberish,
      verificationMultiplier: BigNumberish,
      rarityMultiplier: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userBurns"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "FeeTierUpdated"
  ): TypedContractEvent<
    FeeTierUpdatedEvent.InputTuple,
    FeeTierUpdatedEvent.OutputTuple,
    FeeTierUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "TokensBurned"
  ): TypedContractEvent<
    TokensBurnedEvent.InputTuple,
    TokensBurnedEvent.OutputTuple,
    TokensBurnedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "FeeTierUpdated(string,uint256,uint256,uint256)": TypedContractEvent<
      FeeTierUpdatedEvent.InputTuple,
      FeeTierUpdatedEvent.OutputTuple,
      FeeTierUpdatedEvent.OutputObject
    >;
    FeeTierUpdated: TypedContractEvent<
      FeeTierUpdatedEvent.InputTuple,
      FeeTierUpdatedEvent.OutputTuple,
      FeeTierUpdatedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "TokensBurned(address,uint256,string,uint256)": TypedContractEvent<
      TokensBurnedEvent.InputTuple,
      TokensBurnedEvent.OutputTuple,
      TokensBurnedEvent.OutputObject
    >;
    TokensBurned: TypedContractEvent<
      TokensBurnedEvent.InputTuple,
      TokensBurnedEvent.OutputTuple,
      TokensBurnedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
