/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace AMCManager {
  export type InspectionRecordStruct = {
    assetId: BytesLike;
    inspector: AddressLike;
    status: BigNumberish;
    comments: string;
    inspectionReportHash: string;
    scheduledAt: BigNumberish;
    completedAt: BigNumberish;
  };

  export type InspectionRecordStructOutput = [
    assetId: string,
    inspector: string,
    status: bigint,
    comments: string,
    inspectionReportHash: string,
    scheduledAt: bigint,
    completedAt: bigint
  ] & {
    assetId: string;
    inspector: string;
    status: bigint;
    comments: string;
    inspectionReportHash: string;
    scheduledAt: bigint;
    completedAt: bigint;
  };

  export type LegalTransferRecordStruct = {
    assetId: BytesLike;
    individualOwner: AddressLike;
    amcAddress: AddressLike;
    status: BigNumberish;
    legalDocumentHash: string;
    initiatedAt: BigNumberish;
    completedAt: BigNumberish;
  };

  export type LegalTransferRecordStructOutput = [
    assetId: string,
    individualOwner: string,
    amcAddress: string,
    status: bigint,
    legalDocumentHash: string,
    initiatedAt: bigint,
    completedAt: bigint
  ] & {
    assetId: string;
    individualOwner: string;
    amcAddress: string;
    status: bigint;
    legalDocumentHash: string;
    initiatedAt: bigint;
    completedAt: bigint;
  };
}

export interface AMCManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "AMC_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "INSPECTOR_ROLE"
      | "amcProfiles"
      | "assetFactory"
      | "assetToAMC"
      | "completeInspection"
      | "completeLegalTransfer"
      | "getAMCForAsset"
      | "getInspectionRecord"
      | "getLegalTransferRecord"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initiateLegalTransfer"
      | "inspectionRecords"
      | "legalTransferRecords"
      | "pause"
      | "paused"
      | "registerAMC"
      | "renounceRole"
      | "revokeRole"
      | "scheduleInspection"
      | "supportsInterface"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AMCRegistered"
      | "AssetFlaggedByAMC"
      | "AssetRejectedByAMC"
      | "InspectionCompleted"
      | "InspectionScheduled"
      | "LegalTransferCompleted"
      | "LegalTransferInitiated"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(functionFragment: "AMC_ROLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INSPECTOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "amcProfiles",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assetFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetToAMC",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "completeInspection",
    values: [BytesLike, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "completeLegalTransfer",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAMCForAsset",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getInspectionRecord",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLegalTransferRecord",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateLegalTransfer",
    values: [BytesLike, AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "inspectionRecords",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "legalTransferRecords",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerAMC",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "scheduleInspection",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "AMC_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INSPECTOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amcProfiles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assetToAMC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completeInspection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeLegalTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAMCForAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInspectionRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLegalTransferRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateLegalTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inspectionRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "legalTransferRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerAMC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "scheduleInspection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace AMCRegisteredEvent {
  export type InputTuple = [
    amcAddress: AddressLike,
    name: string,
    jurisdiction: string
  ];
  export type OutputTuple = [
    amcAddress: string,
    name: string,
    jurisdiction: string
  ];
  export interface OutputObject {
    amcAddress: string;
    name: string;
    jurisdiction: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetFlaggedByAMCEvent {
  export type InputTuple = [assetId: BytesLike, reason: string];
  export type OutputTuple = [assetId: string, reason: string];
  export interface OutputObject {
    assetId: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetRejectedByAMCEvent {
  export type InputTuple = [assetId: BytesLike, reason: string];
  export type OutputTuple = [assetId: string, reason: string];
  export interface OutputObject {
    assetId: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InspectionCompletedEvent {
  export type InputTuple = [
    assetId: BytesLike,
    inspector: AddressLike,
    status: BigNumberish,
    comments: string,
    reportHash: string
  ];
  export type OutputTuple = [
    assetId: string,
    inspector: string,
    status: bigint,
    comments: string,
    reportHash: string
  ];
  export interface OutputObject {
    assetId: string;
    inspector: string;
    status: bigint;
    comments: string;
    reportHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InspectionScheduledEvent {
  export type InputTuple = [
    assetId: BytesLike,
    inspector: AddressLike,
    scheduledAt: BigNumberish
  ];
  export type OutputTuple = [
    assetId: string,
    inspector: string,
    scheduledAt: bigint
  ];
  export interface OutputObject {
    assetId: string;
    inspector: string;
    scheduledAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LegalTransferCompletedEvent {
  export type InputTuple = [
    assetId: BytesLike,
    individualOwner: AddressLike,
    amcAddress: AddressLike
  ];
  export type OutputTuple = [
    assetId: string,
    individualOwner: string,
    amcAddress: string
  ];
  export interface OutputObject {
    assetId: string;
    individualOwner: string;
    amcAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LegalTransferInitiatedEvent {
  export type InputTuple = [
    assetId: BytesLike,
    individualOwner: AddressLike,
    amcAddress: AddressLike,
    legalDocumentHash: string
  ];
  export type OutputTuple = [
    assetId: string,
    individualOwner: string,
    amcAddress: string,
    legalDocumentHash: string
  ];
  export interface OutputObject {
    assetId: string;
    individualOwner: string;
    amcAddress: string;
    legalDocumentHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AMCManager extends BaseContract {
  connect(runner?: ContractRunner | null): AMCManager;
  waitForDeployment(): Promise<this>;

  interface: AMCManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  AMC_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  INSPECTOR_ROLE: TypedContractMethod<[], [string], "view">;

  amcProfiles: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        string,
        string,
        string,
        string,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        amcAddress: string;
        name: string;
        description: string;
        jurisdiction: string;
        isActive: boolean;
        registrationDate: bigint;
        totalAssetsManaged: bigint;
        inspectionCount: bigint;
        successfulTransfers: bigint;
      }
    ],
    "view"
  >;

  assetFactory: TypedContractMethod<[], [string], "view">;

  assetToAMC: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  completeInspection: TypedContractMethod<
    [
      _assetId: BytesLike,
      _status: BigNumberish,
      _comments: string,
      _inspectionReportHash: string
    ],
    [void],
    "nonpayable"
  >;

  completeLegalTransfer: TypedContractMethod<
    [_assetId: BytesLike],
    [void],
    "nonpayable"
  >;

  getAMCForAsset: TypedContractMethod<[_assetId: BytesLike], [string], "view">;

  getInspectionRecord: TypedContractMethod<
    [_assetId: BytesLike],
    [AMCManager.InspectionRecordStructOutput],
    "view"
  >;

  getLegalTransferRecord: TypedContractMethod<
    [_assetId: BytesLike],
    [AMCManager.LegalTransferRecordStructOutput],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initiateLegalTransfer: TypedContractMethod<
    [
      _assetId: BytesLike,
      _individualOwner: AddressLike,
      _legalDocumentHash: string
    ],
    [void],
    "nonpayable"
  >;

  inspectionRecords: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, string, string, bigint, bigint] & {
        assetId: string;
        inspector: string;
        status: bigint;
        comments: string;
        inspectionReportHash: string;
        scheduledAt: bigint;
        completedAt: bigint;
      }
    ],
    "view"
  >;

  legalTransferRecords: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, bigint, string, bigint, bigint] & {
        assetId: string;
        individualOwner: string;
        amcAddress: string;
        status: bigint;
        legalDocumentHash: string;
        initiatedAt: bigint;
        completedAt: bigint;
      }
    ],
    "view"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  registerAMC: TypedContractMethod<
    [_name: string, _description: string, _jurisdiction: string],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  scheduleInspection: TypedContractMethod<
    [_assetId: BytesLike, _inspector: AddressLike, _scheduledAt: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "AMC_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "INSPECTOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "amcProfiles"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        string,
        string,
        string,
        string,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        amcAddress: string;
        name: string;
        description: string;
        jurisdiction: string;
        isActive: boolean;
        registrationDate: bigint;
        totalAssetsManaged: bigint;
        inspectionCount: bigint;
        successfulTransfers: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "assetFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "assetToAMC"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "completeInspection"
  ): TypedContractMethod<
    [
      _assetId: BytesLike,
      _status: BigNumberish,
      _comments: string,
      _inspectionReportHash: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "completeLegalTransfer"
  ): TypedContractMethod<[_assetId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAMCForAsset"
  ): TypedContractMethod<[_assetId: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getInspectionRecord"
  ): TypedContractMethod<
    [_assetId: BytesLike],
    [AMCManager.InspectionRecordStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLegalTransferRecord"
  ): TypedContractMethod<
    [_assetId: BytesLike],
    [AMCManager.LegalTransferRecordStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initiateLegalTransfer"
  ): TypedContractMethod<
    [
      _assetId: BytesLike,
      _individualOwner: AddressLike,
      _legalDocumentHash: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "inspectionRecords"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, string, string, bigint, bigint] & {
        assetId: string;
        inspector: string;
        status: bigint;
        comments: string;
        inspectionReportHash: string;
        scheduledAt: bigint;
        completedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "legalTransferRecords"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, bigint, string, bigint, bigint] & {
        assetId: string;
        individualOwner: string;
        amcAddress: string;
        status: bigint;
        legalDocumentHash: string;
        initiatedAt: bigint;
        completedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerAMC"
  ): TypedContractMethod<
    [_name: string, _description: string, _jurisdiction: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "scheduleInspection"
  ): TypedContractMethod<
    [_assetId: BytesLike, _inspector: AddressLike, _scheduledAt: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "AMCRegistered"
  ): TypedContractEvent<
    AMCRegisteredEvent.InputTuple,
    AMCRegisteredEvent.OutputTuple,
    AMCRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "AssetFlaggedByAMC"
  ): TypedContractEvent<
    AssetFlaggedByAMCEvent.InputTuple,
    AssetFlaggedByAMCEvent.OutputTuple,
    AssetFlaggedByAMCEvent.OutputObject
  >;
  getEvent(
    key: "AssetRejectedByAMC"
  ): TypedContractEvent<
    AssetRejectedByAMCEvent.InputTuple,
    AssetRejectedByAMCEvent.OutputTuple,
    AssetRejectedByAMCEvent.OutputObject
  >;
  getEvent(
    key: "InspectionCompleted"
  ): TypedContractEvent<
    InspectionCompletedEvent.InputTuple,
    InspectionCompletedEvent.OutputTuple,
    InspectionCompletedEvent.OutputObject
  >;
  getEvent(
    key: "InspectionScheduled"
  ): TypedContractEvent<
    InspectionScheduledEvent.InputTuple,
    InspectionScheduledEvent.OutputTuple,
    InspectionScheduledEvent.OutputObject
  >;
  getEvent(
    key: "LegalTransferCompleted"
  ): TypedContractEvent<
    LegalTransferCompletedEvent.InputTuple,
    LegalTransferCompletedEvent.OutputTuple,
    LegalTransferCompletedEvent.OutputObject
  >;
  getEvent(
    key: "LegalTransferInitiated"
  ): TypedContractEvent<
    LegalTransferInitiatedEvent.InputTuple,
    LegalTransferInitiatedEvent.OutputTuple,
    LegalTransferInitiatedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "AMCRegistered(address,string,string)": TypedContractEvent<
      AMCRegisteredEvent.InputTuple,
      AMCRegisteredEvent.OutputTuple,
      AMCRegisteredEvent.OutputObject
    >;
    AMCRegistered: TypedContractEvent<
      AMCRegisteredEvent.InputTuple,
      AMCRegisteredEvent.OutputTuple,
      AMCRegisteredEvent.OutputObject
    >;

    "AssetFlaggedByAMC(bytes32,string)": TypedContractEvent<
      AssetFlaggedByAMCEvent.InputTuple,
      AssetFlaggedByAMCEvent.OutputTuple,
      AssetFlaggedByAMCEvent.OutputObject
    >;
    AssetFlaggedByAMC: TypedContractEvent<
      AssetFlaggedByAMCEvent.InputTuple,
      AssetFlaggedByAMCEvent.OutputTuple,
      AssetFlaggedByAMCEvent.OutputObject
    >;

    "AssetRejectedByAMC(bytes32,string)": TypedContractEvent<
      AssetRejectedByAMCEvent.InputTuple,
      AssetRejectedByAMCEvent.OutputTuple,
      AssetRejectedByAMCEvent.OutputObject
    >;
    AssetRejectedByAMC: TypedContractEvent<
      AssetRejectedByAMCEvent.InputTuple,
      AssetRejectedByAMCEvent.OutputTuple,
      AssetRejectedByAMCEvent.OutputObject
    >;

    "InspectionCompleted(bytes32,address,uint8,string,string)": TypedContractEvent<
      InspectionCompletedEvent.InputTuple,
      InspectionCompletedEvent.OutputTuple,
      InspectionCompletedEvent.OutputObject
    >;
    InspectionCompleted: TypedContractEvent<
      InspectionCompletedEvent.InputTuple,
      InspectionCompletedEvent.OutputTuple,
      InspectionCompletedEvent.OutputObject
    >;

    "InspectionScheduled(bytes32,address,uint256)": TypedContractEvent<
      InspectionScheduledEvent.InputTuple,
      InspectionScheduledEvent.OutputTuple,
      InspectionScheduledEvent.OutputObject
    >;
    InspectionScheduled: TypedContractEvent<
      InspectionScheduledEvent.InputTuple,
      InspectionScheduledEvent.OutputTuple,
      InspectionScheduledEvent.OutputObject
    >;

    "LegalTransferCompleted(bytes32,address,address)": TypedContractEvent<
      LegalTransferCompletedEvent.InputTuple,
      LegalTransferCompletedEvent.OutputTuple,
      LegalTransferCompletedEvent.OutputObject
    >;
    LegalTransferCompleted: TypedContractEvent<
      LegalTransferCompletedEvent.InputTuple,
      LegalTransferCompletedEvent.OutputTuple,
      LegalTransferCompletedEvent.OutputObject
    >;

    "LegalTransferInitiated(bytes32,address,address,string)": TypedContractEvent<
      LegalTransferInitiatedEvent.InputTuple,
      LegalTransferInitiatedEvent.OutputTuple,
      LegalTransferInitiatedEvent.OutputObject
    >;
    LegalTransferInitiated: TypedContractEvent<
      LegalTransferInitiatedEvent.InputTuple,
      LegalTransferInitiatedEvent.OutputTuple,
      LegalTransferInitiatedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
