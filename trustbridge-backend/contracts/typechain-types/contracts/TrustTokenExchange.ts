/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TrustTokenExchangeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "EXCHANGE_FEE_RATE"
      | "EXCHANGE_RATE"
      | "FEE_PERCENT"
      | "MIN_EXCHANGE"
      | "OPERATIONS_PERCENT"
      | "OPERATOR_ROLE"
      | "STAKING_PERCENT"
      | "TREASURY_PERCENT"
      | "TREASURY_ROLE"
      | "calculateExchangeFee"
      | "calculateTrustAmount"
      | "exchangeHbarForTrust"
      | "getExchangeStats"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "operationsWallet"
      | "pause"
      | "paused"
      | "renounceRole"
      | "revokeRole"
      | "setOperationsWallet"
      | "setStakingPool"
      | "setTreasuryWallet"
      | "stakingPool"
      | "supportsInterface"
      | "totalExchanges"
      | "totalHbarReceived"
      | "totalTrustMinted"
      | "treasuryWallet"
      | "trustTokenContract"
      | "unpause"
      | "withdrawFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ExchangeExecuted"
      | "HbarDistributed"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "TrustTokensMinted"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EXCHANGE_FEE_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EXCHANGE_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_EXCHANGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATIONS_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STAKING_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TREASURY_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TREASURY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateExchangeFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTrustAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeHbarForTrust",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExchangeStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "operationsWallet",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperationsWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingPool",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalExchanges",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalHbarReceived",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalTrustMinted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "trustTokenContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EXCHANGE_FEE_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EXCHANGE_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_EXCHANGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATIONS_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STAKING_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TREASURY_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TREASURY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateExchangeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTrustAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeHbarForTrust",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchangeStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "operationsWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOperationsWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalExchanges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalHbarReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTrustMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustTokenContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
}

export namespace ExchangeExecutedEvent {
  export type InputTuple = [
    user: AddressLike,
    hbarAmount: BigNumberish,
    trustAmount: BigNumberish,
    exchangeFee: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    hbarAmount: bigint,
    trustAmount: bigint,
    exchangeFee: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    hbarAmount: bigint;
    trustAmount: bigint;
    exchangeFee: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HbarDistributedEvent {
  export type InputTuple = [
    treasury: BigNumberish,
    operations: BigNumberish,
    staking: BigNumberish,
    fees: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    treasury: bigint,
    operations: bigint,
    staking: bigint,
    fees: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    treasury: bigint;
    operations: bigint;
    staking: bigint;
    fees: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrustTokensMintedEvent {
  export type InputTuple = [
    to: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [to: string, amount: bigint, timestamp: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TrustTokenExchange extends BaseContract {
  connect(runner?: ContractRunner | null): TrustTokenExchange;
  waitForDeployment(): Promise<this>;

  interface: TrustTokenExchangeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  EXCHANGE_FEE_RATE: TypedContractMethod<[], [bigint], "view">;

  EXCHANGE_RATE: TypedContractMethod<[], [bigint], "view">;

  FEE_PERCENT: TypedContractMethod<[], [bigint], "view">;

  MIN_EXCHANGE: TypedContractMethod<[], [bigint], "view">;

  OPERATIONS_PERCENT: TypedContractMethod<[], [bigint], "view">;

  OPERATOR_ROLE: TypedContractMethod<[], [string], "view">;

  STAKING_PERCENT: TypedContractMethod<[], [bigint], "view">;

  TREASURY_PERCENT: TypedContractMethod<[], [bigint], "view">;

  TREASURY_ROLE: TypedContractMethod<[], [string], "view">;

  calculateExchangeFee: TypedContractMethod<
    [hbarAmount: BigNumberish],
    [bigint],
    "view"
  >;

  calculateTrustAmount: TypedContractMethod<
    [hbarAmount: BigNumberish],
    [bigint],
    "view"
  >;

  exchangeHbarForTrust: TypedContractMethod<[], [void], "payable">;

  getExchangeStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        _totalHbarReceived: bigint;
        _totalTrustMinted: bigint;
        _totalExchanges: bigint;
        _contractBalance: bigint;
      }
    ],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  operationsWallet: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setOperationsWallet: TypedContractMethod<
    [_newOperations: AddressLike],
    [void],
    "nonpayable"
  >;

  setStakingPool: TypedContractMethod<
    [_newStakingPool: AddressLike],
    [void],
    "nonpayable"
  >;

  setTreasuryWallet: TypedContractMethod<
    [_newTreasury: AddressLike],
    [void],
    "nonpayable"
  >;

  stakingPool: TypedContractMethod<[], [string], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  totalExchanges: TypedContractMethod<[], [bigint], "view">;

  totalHbarReceived: TypedContractMethod<[], [bigint], "view">;

  totalTrustMinted: TypedContractMethod<[], [bigint], "view">;

  treasuryWallet: TypedContractMethod<[], [string], "view">;

  trustTokenContract: TypedContractMethod<[], [string], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  withdrawFees: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "EXCHANGE_FEE_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "EXCHANGE_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FEE_PERCENT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_EXCHANGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "OPERATIONS_PERCENT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "OPERATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "STAKING_PERCENT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TREASURY_PERCENT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TREASURY_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "calculateExchangeFee"
  ): TypedContractMethod<[hbarAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateTrustAmount"
  ): TypedContractMethod<[hbarAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "exchangeHbarForTrust"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "getExchangeStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        _totalHbarReceived: bigint;
        _totalTrustMinted: bigint;
        _totalExchanges: bigint;
        _contractBalance: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "operationsWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOperationsWallet"
  ): TypedContractMethod<[_newOperations: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setStakingPool"
  ): TypedContractMethod<[_newStakingPool: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTreasuryWallet"
  ): TypedContractMethod<[_newTreasury: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stakingPool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalExchanges"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalHbarReceived"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalTrustMinted"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "treasuryWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "trustTokenContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawFees"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "ExchangeExecuted"
  ): TypedContractEvent<
    ExchangeExecutedEvent.InputTuple,
    ExchangeExecutedEvent.OutputTuple,
    ExchangeExecutedEvent.OutputObject
  >;
  getEvent(
    key: "HbarDistributed"
  ): TypedContractEvent<
    HbarDistributedEvent.InputTuple,
    HbarDistributedEvent.OutputTuple,
    HbarDistributedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "TrustTokensMinted"
  ): TypedContractEvent<
    TrustTokensMintedEvent.InputTuple,
    TrustTokensMintedEvent.OutputTuple,
    TrustTokensMintedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "ExchangeExecuted(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      ExchangeExecutedEvent.InputTuple,
      ExchangeExecutedEvent.OutputTuple,
      ExchangeExecutedEvent.OutputObject
    >;
    ExchangeExecuted: TypedContractEvent<
      ExchangeExecutedEvent.InputTuple,
      ExchangeExecutedEvent.OutputTuple,
      ExchangeExecutedEvent.OutputObject
    >;

    "HbarDistributed(uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      HbarDistributedEvent.InputTuple,
      HbarDistributedEvent.OutputTuple,
      HbarDistributedEvent.OutputObject
    >;
    HbarDistributed: TypedContractEvent<
      HbarDistributedEvent.InputTuple,
      HbarDistributedEvent.OutputTuple,
      HbarDistributedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "TrustTokensMinted(address,uint256,uint256)": TypedContractEvent<
      TrustTokensMintedEvent.InputTuple,
      TrustTokensMintedEvent.OutputTuple,
      TrustTokensMintedEvent.OutputObject
    >;
    TrustTokensMinted: TypedContractEvent<
      TrustTokensMintedEvent.InputTuple,
      TrustTokensMintedEvent.OutputTuple,
      TrustTokensMintedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
