/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TrustBridgeOffersInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOffer"
      | "buyerOffers"
      | "cancelOffer"
      | "expireOffer"
      | "getBuyerOffers"
      | "getHighestOffer"
      | "getOffer"
      | "getOffersForNFT"
      | "makeOffer"
      | "nextOfferId"
      | "nftOffers"
      | "offers"
      | "trustTokenAddress"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OfferAccepted"
      | "OfferCancelled"
      | "OfferCreated"
      | "OfferExpired"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyerOffers",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "expireOffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyerOffers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getHighestOffer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOffersForNFT",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "makeOffer",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextOfferId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftOffers",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "offers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "trustTokenAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyerOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expireOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyerOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHighestOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOffersForNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "makeOffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextOfferId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nftOffers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "offers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "trustTokenAddress",
    data: BytesLike
  ): Result;
}

export namespace OfferAcceptedEvent {
  export type InputTuple = [
    offerId: BigNumberish,
    seller: AddressLike,
    buyer: AddressLike,
    finalPrice: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    offerId: bigint,
    seller: string,
    buyer: string,
    finalPrice: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    offerId: bigint;
    seller: string;
    buyer: string;
    finalPrice: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OfferCancelledEvent {
  export type InputTuple = [
    offerId: BigNumberish,
    buyer: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [offerId: bigint, buyer: string, timestamp: bigint];
  export interface OutputObject {
    offerId: bigint;
    buyer: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OfferCreatedEvent {
  export type InputTuple = [
    offerId: BigNumberish,
    buyer: AddressLike,
    nftAddress: AddressLike,
    serialNumber: BigNumberish,
    offerPrice: BigNumberish,
    expiresAt: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    offerId: bigint,
    buyer: string,
    nftAddress: string,
    serialNumber: bigint,
    offerPrice: bigint,
    expiresAt: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    offerId: bigint;
    buyer: string;
    nftAddress: string;
    serialNumber: bigint;
    offerPrice: bigint;
    expiresAt: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OfferExpiredEvent {
  export type InputTuple = [offerId: BigNumberish, timestamp: BigNumberish];
  export type OutputTuple = [offerId: bigint, timestamp: bigint];
  export interface OutputObject {
    offerId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TrustBridgeOffers extends BaseContract {
  connect(runner?: ContractRunner | null): TrustBridgeOffers;
  waitForDeployment(): Promise<this>;

  interface: TrustBridgeOffersInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOffer: TypedContractMethod<
    [_offerId: BigNumberish],
    [void],
    "nonpayable"
  >;

  buyerOffers: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  cancelOffer: TypedContractMethod<
    [_offerId: BigNumberish],
    [void],
    "nonpayable"
  >;

  expireOffer: TypedContractMethod<
    [_offerId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getBuyerOffers: TypedContractMethod<
    [_buyer: AddressLike],
    [bigint[]],
    "view"
  >;

  getHighestOffer: TypedContractMethod<
    [_nftAddress: AddressLike, _serialNumber: BigNumberish],
    [[bigint, bigint] & { offerId: bigint; highestPrice: bigint }],
    "view"
  >;

  getOffer: TypedContractMethod<
    [_offerId: BigNumberish],
    [
      [string, string, bigint, bigint, bigint, boolean, bigint] & {
        buyer: string;
        nftAddress: string;
        serialNumber: bigint;
        offerPrice: bigint;
        expiresAt: bigint;
        isActive: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  getOffersForNFT: TypedContractMethod<
    [_nftAddress: AddressLike, _serialNumber: BigNumberish],
    [bigint[]],
    "view"
  >;

  makeOffer: TypedContractMethod<
    [
      _nftAddress: AddressLike,
      _serialNumber: BigNumberish,
      _offerPrice: BigNumberish,
      _durationDays: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  nextOfferId: TypedContractMethod<[], [bigint], "view">;

  nftOffers: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BigNumberish],
    [bigint],
    "view"
  >;

  offers: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, bigint, bigint, boolean, bigint] & {
        offerId: bigint;
        buyer: string;
        nftAddress: string;
        serialNumber: bigint;
        offerPrice: bigint;
        expiresAt: bigint;
        isActive: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  trustTokenAddress: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOffer"
  ): TypedContractMethod<[_offerId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "buyerOffers"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "cancelOffer"
  ): TypedContractMethod<[_offerId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "expireOffer"
  ): TypedContractMethod<[_offerId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getBuyerOffers"
  ): TypedContractMethod<[_buyer: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getHighestOffer"
  ): TypedContractMethod<
    [_nftAddress: AddressLike, _serialNumber: BigNumberish],
    [[bigint, bigint] & { offerId: bigint; highestPrice: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOffer"
  ): TypedContractMethod<
    [_offerId: BigNumberish],
    [
      [string, string, bigint, bigint, bigint, boolean, bigint] & {
        buyer: string;
        nftAddress: string;
        serialNumber: bigint;
        offerPrice: bigint;
        expiresAt: bigint;
        isActive: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOffersForNFT"
  ): TypedContractMethod<
    [_nftAddress: AddressLike, _serialNumber: BigNumberish],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "makeOffer"
  ): TypedContractMethod<
    [
      _nftAddress: AddressLike,
      _serialNumber: BigNumberish,
      _offerPrice: BigNumberish,
      _durationDays: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nextOfferId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nftOffers"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "offers"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, bigint, bigint, boolean, bigint] & {
        offerId: bigint;
        buyer: string;
        nftAddress: string;
        serialNumber: bigint;
        offerPrice: bigint;
        expiresAt: bigint;
        isActive: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "trustTokenAddress"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "OfferAccepted"
  ): TypedContractEvent<
    OfferAcceptedEvent.InputTuple,
    OfferAcceptedEvent.OutputTuple,
    OfferAcceptedEvent.OutputObject
  >;
  getEvent(
    key: "OfferCancelled"
  ): TypedContractEvent<
    OfferCancelledEvent.InputTuple,
    OfferCancelledEvent.OutputTuple,
    OfferCancelledEvent.OutputObject
  >;
  getEvent(
    key: "OfferCreated"
  ): TypedContractEvent<
    OfferCreatedEvent.InputTuple,
    OfferCreatedEvent.OutputTuple,
    OfferCreatedEvent.OutputObject
  >;
  getEvent(
    key: "OfferExpired"
  ): TypedContractEvent<
    OfferExpiredEvent.InputTuple,
    OfferExpiredEvent.OutputTuple,
    OfferExpiredEvent.OutputObject
  >;

  filters: {
    "OfferAccepted(uint256,address,address,uint256,uint256)": TypedContractEvent<
      OfferAcceptedEvent.InputTuple,
      OfferAcceptedEvent.OutputTuple,
      OfferAcceptedEvent.OutputObject
    >;
    OfferAccepted: TypedContractEvent<
      OfferAcceptedEvent.InputTuple,
      OfferAcceptedEvent.OutputTuple,
      OfferAcceptedEvent.OutputObject
    >;

    "OfferCancelled(uint256,address,uint256)": TypedContractEvent<
      OfferCancelledEvent.InputTuple,
      OfferCancelledEvent.OutputTuple,
      OfferCancelledEvent.OutputObject
    >;
    OfferCancelled: TypedContractEvent<
      OfferCancelledEvent.InputTuple,
      OfferCancelledEvent.OutputTuple,
      OfferCancelledEvent.OutputObject
    >;

    "OfferCreated(uint256,address,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      OfferCreatedEvent.InputTuple,
      OfferCreatedEvent.OutputTuple,
      OfferCreatedEvent.OutputObject
    >;
    OfferCreated: TypedContractEvent<
      OfferCreatedEvent.InputTuple,
      OfferCreatedEvent.OutputTuple,
      OfferCreatedEvent.OutputObject
    >;

    "OfferExpired(uint256,uint256)": TypedContractEvent<
      OfferExpiredEvent.InputTuple,
      OfferExpiredEvent.OutputTuple,
      OfferExpiredEvent.OutputObject
    >;
    OfferExpired: TypedContractEvent<
      OfferExpiredEvent.InputTuple,
      OfferExpiredEvent.OutputTuple,
      OfferExpiredEvent.OutputObject
    >;
  };
}
