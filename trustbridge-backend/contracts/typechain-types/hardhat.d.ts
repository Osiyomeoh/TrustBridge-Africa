/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Errors__factory>;
    getContractFactory(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Errors__factory>;
    getContractFactory(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Errors__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "MerkleProof",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MerkleProof__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "SafeCast",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeCast__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuard__factory>;
    getContractFactory(
      name: "Strings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Strings__factory>;
    getContractFactory(
      name: "AdvancedMinting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AdvancedMinting__factory>;
    getContractFactory(
      name: "AMCManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AMCManager__factory>;
    getContractFactory(
      name: "AssetNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AssetNFT__factory>;
    getContractFactory(
      name: "AttestorVerificationSystem",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AttestorVerificationSystem__factory>;
    getContractFactory(
      name: "BatchMinting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BatchMinting__factory>;
    getContractFactory(
      name: "CoreAssetFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CoreAssetFactory__factory>;
    getContractFactory(
      name: "FeeDistribution",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeDistribution__factory>;
    getContractFactory(
      name: "Governance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Governance__factory>;
    getContractFactory(
      name: "IAssetFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAssetFactory__factory>;
    getContractFactory(
      name: "IPoolFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolFactory__factory>;
    getContractFactory(
      name: "IVerificationRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVerificationRegistry__factory>;
    getContractFactory(
      name: "NFTMarketplace",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTMarketplace__factory>;
    getContractFactory(
      name: "PoolManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolManager__factory>;
    getContractFactory(
      name: "PoolToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolToken__factory>;
    getContractFactory(
      name: "SPVManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SPVManager__factory>;
    getContractFactory(
      name: "TradingEngine",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TradingEngine__factory>;
    getContractFactory(
      name: "TRUSTAssetFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TRUSTAssetFactory__factory>;
    getContractFactory(
      name: "TRUSTFaucet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TRUSTFaucet__factory>;
    getContractFactory(
      name: "TRUSTMarketplace",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TRUSTMarketplace__factory>;
    getContractFactory(
      name: "TrustToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TrustToken__factory>;
    getContractFactory(
      name: "VerificationRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VerificationRegistry__factory>;

    getContractAt(
      name: "AccessControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1155Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Errors>;
    getContractAt(
      name: "IERC20Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Errors>;
    getContractAt(
      name: "IERC721Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Errors>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC721",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "IERC721Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "MerkleProof",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MerkleProof>;
    getContractAt(
      name: "ERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "SafeCast",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeCast>;
    getContractAt(
      name: "Pausable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ReentrancyGuard",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuard>;
    getContractAt(
      name: "Strings",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Strings>;
    getContractAt(
      name: "AdvancedMinting",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AdvancedMinting>;
    getContractAt(
      name: "AMCManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AMCManager>;
    getContractAt(
      name: "AssetNFT",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AssetNFT>;
    getContractAt(
      name: "AttestorVerificationSystem",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AttestorVerificationSystem>;
    getContractAt(
      name: "BatchMinting",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BatchMinting>;
    getContractAt(
      name: "CoreAssetFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CoreAssetFactory>;
    getContractAt(
      name: "FeeDistribution",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeDistribution>;
    getContractAt(
      name: "Governance",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Governance>;
    getContractAt(
      name: "IAssetFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAssetFactory>;
    getContractAt(
      name: "IPoolFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPoolFactory>;
    getContractAt(
      name: "IVerificationRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IVerificationRegistry>;
    getContractAt(
      name: "NFTMarketplace",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTMarketplace>;
    getContractAt(
      name: "PoolManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolManager>;
    getContractAt(
      name: "PoolToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolToken>;
    getContractAt(
      name: "SPVManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SPVManager>;
    getContractAt(
      name: "TradingEngine",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TradingEngine>;
    getContractAt(
      name: "TRUSTAssetFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TRUSTAssetFactory>;
    getContractAt(
      name: "TRUSTFaucet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TRUSTFaucet>;
    getContractAt(
      name: "TRUSTMarketplace",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TRUSTMarketplace>;
    getContractAt(
      name: "TrustToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TrustToken>;
    getContractAt(
      name: "VerificationRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.VerificationRegistry>;

    deployContract(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControl>;
    deployContract(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControl>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721>;
    deployContract(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Metadata>;
    deployContract(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721>;
    deployContract(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Receiver>;
    deployContract(
      name: "MerkleProof",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MerkleProof>;
    deployContract(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "SafeCast",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeCast>;
    deployContract(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuard>;
    deployContract(
      name: "Strings",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Strings>;
    deployContract(
      name: "AdvancedMinting",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AdvancedMinting>;
    deployContract(
      name: "AMCManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AMCManager>;
    deployContract(
      name: "AssetNFT",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AssetNFT>;
    deployContract(
      name: "AttestorVerificationSystem",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AttestorVerificationSystem>;
    deployContract(
      name: "BatchMinting",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BatchMinting>;
    deployContract(
      name: "CoreAssetFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CoreAssetFactory>;
    deployContract(
      name: "FeeDistribution",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FeeDistribution>;
    deployContract(
      name: "Governance",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Governance>;
    deployContract(
      name: "IAssetFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAssetFactory>;
    deployContract(
      name: "IPoolFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPoolFactory>;
    deployContract(
      name: "IVerificationRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVerificationRegistry>;
    deployContract(
      name: "NFTMarketplace",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.NFTMarketplace>;
    deployContract(
      name: "PoolManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PoolManager>;
    deployContract(
      name: "PoolToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PoolToken>;
    deployContract(
      name: "SPVManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SPVManager>;
    deployContract(
      name: "TradingEngine",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TradingEngine>;
    deployContract(
      name: "TRUSTAssetFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TRUSTAssetFactory>;
    deployContract(
      name: "TRUSTFaucet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TRUSTFaucet>;
    deployContract(
      name: "TRUSTMarketplace",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TRUSTMarketplace>;
    deployContract(
      name: "TrustToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TrustToken>;
    deployContract(
      name: "VerificationRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VerificationRegistry>;

    deployContract(
      name: "AccessControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControl>;
    deployContract(
      name: "IAccessControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControl>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1155Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ERC721",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721>;
    deployContract(
      name: "IERC721Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Metadata>;
    deployContract(
      name: "IERC721",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721>;
    deployContract(
      name: "IERC721Receiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Receiver>;
    deployContract(
      name: "MerkleProof",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MerkleProof>;
    deployContract(
      name: "ERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "SafeCast",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeCast>;
    deployContract(
      name: "Pausable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "ReentrancyGuard",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuard>;
    deployContract(
      name: "Strings",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Strings>;
    deployContract(
      name: "AdvancedMinting",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AdvancedMinting>;
    deployContract(
      name: "AMCManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AMCManager>;
    deployContract(
      name: "AssetNFT",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AssetNFT>;
    deployContract(
      name: "AttestorVerificationSystem",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AttestorVerificationSystem>;
    deployContract(
      name: "BatchMinting",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BatchMinting>;
    deployContract(
      name: "CoreAssetFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CoreAssetFactory>;
    deployContract(
      name: "FeeDistribution",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FeeDistribution>;
    deployContract(
      name: "Governance",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Governance>;
    deployContract(
      name: "IAssetFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAssetFactory>;
    deployContract(
      name: "IPoolFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPoolFactory>;
    deployContract(
      name: "IVerificationRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVerificationRegistry>;
    deployContract(
      name: "NFTMarketplace",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.NFTMarketplace>;
    deployContract(
      name: "PoolManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PoolManager>;
    deployContract(
      name: "PoolToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PoolToken>;
    deployContract(
      name: "SPVManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SPVManager>;
    deployContract(
      name: "TradingEngine",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TradingEngine>;
    deployContract(
      name: "TRUSTAssetFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TRUSTAssetFactory>;
    deployContract(
      name: "TRUSTFaucet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TRUSTFaucet>;
    deployContract(
      name: "TRUSTMarketplace",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TRUSTMarketplace>;
    deployContract(
      name: "TrustToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TrustToken>;
    deployContract(
      name: "VerificationRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VerificationRegistry>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
