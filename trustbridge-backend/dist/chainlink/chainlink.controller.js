"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChainlinkController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const chainlink_service_1 = require("./chainlink.service");
const chainlink_hedera_service_1 = require("./chainlink-hedera.service");
const chainlink_external_service_1 = require("./chainlink-external.service");
let ChainlinkController = class ChainlinkController {
    constructor(chainlinkService, chainlinkHederaService, chainlinkExternalService) {
        this.chainlinkService = chainlinkService;
        this.chainlinkHederaService = chainlinkHederaService;
        this.chainlinkExternalService = chainlinkExternalService;
    }
    async getAssetPrice(assetType, country) {
        const priceData = await this.chainlinkService.getAssetPrice(assetType, country || 'US');
        return {
            success: true,
            data: priceData,
            message: `${assetType} price from Chainlink`
        };
    }
    async getCoffeePrice(country) {
        const priceData = await this.chainlinkService.getAssetPrice('coffee', country || 'US');
        return {
            success: true,
            data: priceData,
            message: 'Coffee price from Chainlink'
        };
    }
    async getWeatherData(lat, lng) {
        if (!lat || !lng) {
            return {
                success: false,
                error: 'Latitude and longitude are required'
            };
        }
        const weatherData = await this.chainlinkService.getWeatherData(parseFloat(lat), parseFloat(lng));
        return {
            success: true,
            data: weatherData,
            message: 'Weather data from Chainlink'
        };
    }
    async getMarketData(assetType, country) {
        const marketData = await this.chainlinkService.getMarketData(assetType, country || 'US');
        return {
            success: true,
            data: marketData,
            message: `Market data for ${assetType}`
        };
    }
    async getHistoricalPrices(assetType, days) {
        const daysCount = days ? parseInt(days, 10) : 30;
        const historicalData = await this.chainlinkService.getHistoricalPrices(assetType, daysCount);
        return {
            success: true,
            data: historicalData,
            message: `Historical prices for ${assetType} (${daysCount} days)`
        };
    }
    async requestRandomNumber() {
        const vrfResult = await this.chainlinkService.requestRandomNumber();
        return {
            success: true,
            data: vrfResult,
            message: 'Random number generated by Chainlink VRF'
        };
    }
    async getRandomAttestor(body) {
        const randomIndex = await this.chainlinkService.getRandomAttestor(body.attestorCount);
        return {
            success: true,
            data: { randomIndex, attestorCount: body.attestorCount },
            message: 'Random attestor selected using Chainlink VRF'
        };
    }
    async verifyLocation(body) {
        const isValid = await this.chainlinkService.verifyLocation(body.lat, body.lng);
        return {
            success: true,
            data: { lat: body.lat, lng: body.lng, valid: isValid },
            message: isValid ? 'Location verified' : 'Location verification failed'
        };
    }
    async getPriceFeeds() {
        const feeds = this.chainlinkService.getPriceFeedAddresses();
        return {
            success: true,
            data: feeds,
            message: 'Available Chainlink price feeds'
        };
    }
    async getVRFConfig() {
        const config = this.chainlinkService.getVRFConfiguration();
        return {
            success: true,
            data: config,
            message: 'Chainlink VRF configuration'
        };
    }
    async healthCheck() {
        const isHealthy = await this.chainlinkService.healthCheck();
        return {
            success: true,
            data: { healthy: isHealthy, configured: this.chainlinkService.isConfigured() },
            message: isHealthy ? 'Chainlink services are healthy' : 'Chainlink services are not responding'
        };
    }
    async getAvailableFeeds() {
        const feeds = this.chainlinkExternalService.getAvailableFeeds();
        return {
            success: true,
            data: { feeds },
            message: `Found ${feeds.length} available Chainlink price feeds`
        };
    }
    async getFeedPrice(symbol) {
        const priceData = await this.chainlinkExternalService.getLatestPrice(symbol);
        if (!priceData) {
            return {
                success: false,
                message: `Price feed not available for ${symbol}`
            };
        }
        return {
            success: true,
            data: priceData,
            message: `Real-time ${symbol} price from Chainlink`
        };
    }
    async getFeedInfo(symbol) {
        const info = await this.chainlinkExternalService.getPriceFeedInfo(symbol);
        if (!info) {
            return {
                success: false,
                message: `Feed information not available for ${symbol}`
            };
        }
        return {
            success: true,
            data: info,
            message: `Feed information for ${symbol}`
        };
    }
    async getHistoricalPrice(symbol, roundId) {
        const priceData = await this.chainlinkExternalService.getHistoricalPrice(symbol, parseInt(roundId));
        if (!priceData) {
            return {
                success: false,
                message: `Historical price not available for ${symbol} round ${roundId}`
            };
        }
        return {
            success: true,
            data: priceData,
            message: `Historical ${symbol} price for round ${roundId}`
        };
    }
};
exports.ChainlinkController = ChainlinkController;
__decorate([
    (0, common_1.Get)('price/:assetType'),
    (0, swagger_1.ApiOperation)({ summary: 'Get current asset price from Chainlink' }),
    (0, swagger_1.ApiQuery)({ name: 'country', required: false, description: 'Country code for localized pricing' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Current asset price' }),
    __param(0, (0, common_1.Param)('assetType')),
    __param(1, (0, common_1.Query)('country')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String]),
    __metadata("design:returntype", Promise)
], ChainlinkController.prototype, "getAssetPrice", null);
__decorate([
    (0, common_1.Get)('price/coffee'),
    (0, swagger_1.ApiOperation)({ summary: 'Get current coffee price from Chainlink' }),
    (0, swagger_1.ApiQuery)({ name: 'country', required: false, description: 'Country code' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Current coffee price' }),
    __param(0, (0, common_1.Query)('country')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], ChainlinkController.prototype, "getCoffeePrice", null);
__decorate([
    (0, common_1.Get)('weather'),
    (0, swagger_1.ApiOperation)({ summary: 'Get weather data from Chainlink oracle' }),
    (0, swagger_1.ApiQuery)({ name: 'lat', required: true, description: 'Latitude' }),
    (0, swagger_1.ApiQuery)({ name: 'lng', required: true, description: 'Longitude' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Weather data' }),
    __param(0, (0, common_1.Query)('lat')),
    __param(1, (0, common_1.Query)('lng')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String]),
    __metadata("design:returntype", Promise)
], ChainlinkController.prototype, "getWeatherData", null);
__decorate([
    (0, common_1.Get)('market/:assetType'),
    (0, swagger_1.ApiOperation)({ summary: 'Get market data for asset type' }),
    (0, swagger_1.ApiQuery)({ name: 'country', required: false, description: 'Country code' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Market data' }),
    __param(0, (0, common_1.Param)('assetType')),
    __param(1, (0, common_1.Query)('country')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String]),
    __metadata("design:returntype", Promise)
], ChainlinkController.prototype, "getMarketData", null);
__decorate([
    (0, common_1.Get)('historical/:assetType'),
    (0, swagger_1.ApiOperation)({ summary: 'Get historical prices for asset' }),
    (0, swagger_1.ApiQuery)({ name: 'days', required: false, description: 'Number of days (default: 30)' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Historical price data' }),
    __param(0, (0, common_1.Param)('assetType')),
    __param(1, (0, common_1.Query)('days')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String]),
    __metadata("design:returntype", Promise)
], ChainlinkController.prototype, "getHistoricalPrices", null);
__decorate([
    (0, common_1.Post)('vrf/random'),
    (0, swagger_1.ApiOperation)({ summary: 'Request random number from Chainlink VRF' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Random number generated' }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], ChainlinkController.prototype, "requestRandomNumber", null);
__decorate([
    (0, common_1.Post)('vrf/attestor'),
    (0, swagger_1.ApiOperation)({ summary: 'Get random attestor using VRF' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Random attestor selected' }),
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], ChainlinkController.prototype, "getRandomAttestor", null);
__decorate([
    (0, common_1.Post)('verify/location'),
    (0, swagger_1.ApiOperation)({ summary: 'Verify location using external APIs' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Location verification result' }),
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], ChainlinkController.prototype, "verifyLocation", null);
__decorate([
    (0, common_1.Get)('feeds'),
    (0, swagger_1.ApiOperation)({ summary: 'Get available price feed addresses' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Price feed addresses' }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], ChainlinkController.prototype, "getPriceFeeds", null);
__decorate([
    (0, common_1.Get)('vrf/config'),
    (0, swagger_1.ApiOperation)({ summary: 'Get VRF configuration' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'VRF configuration' }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], ChainlinkController.prototype, "getVRFConfig", null);
__decorate([
    (0, common_1.Get)('health'),
    (0, swagger_1.ApiOperation)({ summary: 'Health check for Chainlink services' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Health status' }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], ChainlinkController.prototype, "healthCheck", null);
__decorate([
    (0, common_1.Get)('feeds/available'),
    (0, swagger_1.ApiOperation)({ summary: 'Get available Chainlink price feeds' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'List of available price feeds' }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], ChainlinkController.prototype, "getAvailableFeeds", null);
__decorate([
    (0, common_1.Get)('feeds/:symbol'),
    (0, swagger_1.ApiOperation)({ summary: 'Get real-time price from Chainlink feed' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Real-time price data' }),
    __param(0, (0, common_1.Param)('symbol')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], ChainlinkController.prototype, "getFeedPrice", null);
__decorate([
    (0, common_1.Get)('feeds/:symbol/info'),
    (0, swagger_1.ApiOperation)({ summary: 'Get Chainlink feed information' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Feed information' }),
    __param(0, (0, common_1.Param)('symbol')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], ChainlinkController.prototype, "getFeedInfo", null);
__decorate([
    (0, common_1.Get)('feeds/:symbol/historical/:roundId'),
    (0, swagger_1.ApiOperation)({ summary: 'Get historical price from Chainlink feed' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Historical price data' }),
    __param(0, (0, common_1.Param)('symbol')),
    __param(1, (0, common_1.Param)('roundId')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String]),
    __metadata("design:returntype", Promise)
], ChainlinkController.prototype, "getHistoricalPrice", null);
exports.ChainlinkController = ChainlinkController = __decorate([
    (0, swagger_1.ApiTags)('Chainlink'),
    (0, common_1.Controller)('api/chainlink'),
    __metadata("design:paramtypes", [chainlink_service_1.ChainlinkService,
        chainlink_hedera_service_1.ChainlinkHederaService,
        chainlink_external_service_1.ChainlinkExternalService])
], ChainlinkController);
//# sourceMappingURL=chainlink.controller.js.map